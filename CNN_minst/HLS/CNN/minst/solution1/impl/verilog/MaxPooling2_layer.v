// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MaxPooling2_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv2_output_address0,
        conv2_output_ce0,
        conv2_output_q0,
        pool2_output_address0,
        pool2_output_ce0,
        pool2_output_we0,
        pool2_output_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] conv2_output_address0;
output   conv2_output_ce0;
input  [31:0] conv2_output_q0;
output  [6:0] pool2_output_address0;
output   pool2_output_ce0;
output   pool2_output_we0;
output  [31:0] pool2_output_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv2_output_ce0;
reg pool2_output_ce0;
reg pool2_output_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] channels_1_fu_167_p2;
reg   [2:0] channels_1_reg_328;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_12_cast_fu_181_p1;
reg   [5:0] tmp_12_cast_reg_333;
wire   [0:0] exitcond4_fu_161_p2;
wire   [2:0] row_1_fu_191_p2;
reg   [2:0] row_1_reg_341;
wire    ap_CS_fsm_state3;
wire   [2:0] tmp_7_fu_197_p2;
reg   [2:0] tmp_7_reg_346;
wire   [0:0] exitcond3_fu_185_p2;
wire   [7:0] tmp_16_cast_fu_212_p3;
reg   [7:0] tmp_16_cast_reg_351;
wire   [2:0] column_1_fu_226_p2;
reg   [2:0] column_1_reg_359;
wire    ap_CS_fsm_state4;
wire   [2:0] tmp_8_fu_232_p2;
reg   [2:0] tmp_8_reg_364;
wire   [0:0] exitcond2_fu_220_p2;
wire   [1:0] i_1_fu_248_p2;
reg   [1:0] i_1_reg_372;
wire    ap_CS_fsm_state5;
wire   [2:0] tmp_4_fu_254_p2;
reg   [2:0] tmp_4_reg_377;
wire   [0:0] exitcond1_fu_242_p2;
wire   [1:0] j_1_fu_292_p2;
reg   [1:0] j_1_reg_385;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_286_p2;
wire   [31:0] maxn_2_fu_317_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] channels_reg_72;
reg   [2:0] row_1_1_reg_84;
reg   [2:0] column_1_1_reg_95;
reg   [1:0] i_reg_107;
reg   [31:0] maxn_reg_118;
reg   [1:0] j_reg_130;
reg   [31:0] maxn_1_reg_141;
wire   [63:0] tmp_18_cast_fu_277_p1;
wire   [63:0] tmp_11_fu_312_p1;
reg   [31:0] grp_fu_153_p0;
reg   [31:0] grp_fu_153_p1;
wire   [4:0] tmp_fu_173_p3;
wire   [5:0] tmp_8_cast_fu_203_p1;
wire   [5:0] tmp_s_fu_207_p2;
wire   [2:0] i_cast_fu_238_p1;
wire   [0:0] grp_fu_153_p2;
wire   [7:0] tmp_3_cast_fu_268_p1;
wire   [7:0] tmp_3_fu_272_p2;
wire   [2:0] j_cast_fu_282_p1;
wire   [2:0] tmp_6_fu_298_p2;
wire   [8:0] tmp_10_fu_303_p4;
reg   [4:0] grp_fu_153_opcode;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

run_fcmp_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
run_fcmp_32ns_32ndEe_U131(
    .din0(grp_fu_153_p0),
    .din1(grp_fu_153_p1),
    .opcode(grp_fu_153_opcode),
    .dout(grp_fu_153_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        channels_reg_72 <= channels_1_reg_328;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        channels_reg_72 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        column_1_1_reg_95 <= 3'd0;
    end else if (((exitcond1_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        column_1_1_reg_95 <= column_1_reg_359;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_286_p2 == 1'd1))) begin
        i_reg_107 <= i_1_reg_372;
    end else if (((exitcond2_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_107 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_130 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_130 <= j_1_reg_385;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        maxn_1_reg_141 <= maxn_reg_118;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        maxn_1_reg_141 <= maxn_2_fu_317_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_286_p2 == 1'd1))) begin
        maxn_reg_118 <= maxn_1_reg_141;
    end else if (((exitcond2_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        maxn_reg_118 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_1_1_reg_84 <= row_1_reg_341;
    end else if (((exitcond4_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_1_1_reg_84 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        channels_1_reg_328 <= channels_1_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        column_1_reg_359 <= column_1_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_372 <= i_1_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_385 <= j_1_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_1_reg_341 <= row_1_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_12_cast_reg_333[4 : 2] <= tmp_12_cast_fu_181_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_185_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_16_cast_reg_351[7 : 2] <= tmp_16_cast_fu_212_p3[7 : 2];
        tmp_7_reg_346[2 : 1] <= tmp_7_fu_197_p2[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_4_reg_377 <= tmp_4_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_8_reg_364[2 : 1] <= tmp_8_fu_232_p2[2 : 1];
    end
end

always @ (*) begin
    if ((((exitcond4_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv2_output_ce0 = 1'b1;
    end else begin
        conv2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_153_opcode = 5'd4;
    end else if (((exitcond1_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_153_opcode = 5'd2;
    end else begin
        grp_fu_153_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_153_p0 = maxn_1_reg_141;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_153_p0 = maxn_reg_118;
    end else begin
        grp_fu_153_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_153_p1 = conv2_output_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_153_p1 = 32'd0;
    end else begin
        grp_fu_153_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pool2_output_ce0 = 1'b1;
    end else begin
        pool2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        pool2_output_we0 = 1'b1;
    end else begin
        pool2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_185_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_220_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_286_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign channels_1_fu_167_p2 = (channels_reg_72 + 3'd1);

assign column_1_fu_226_p2 = (column_1_1_reg_95 + 3'd1);

assign conv2_output_address0 = tmp_11_fu_312_p1;

assign exitcond1_fu_242_p2 = ((i_reg_107 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_220_p2 = ((column_1_1_reg_95 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_185_p2 = ((row_1_1_reg_84 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_161_p2 = ((channels_reg_72 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_fu_286_p2 = ((j_reg_130 == 2'd2) ? 1'b1 : 1'b0);

assign i_1_fu_248_p2 = (i_reg_107 + 2'd1);

assign i_cast_fu_238_p1 = i_reg_107;

assign j_1_fu_292_p2 = (j_reg_130 + 2'd1);

assign j_cast_fu_282_p1 = j_reg_130;

assign maxn_2_fu_317_p3 = ((grp_fu_153_p2[0:0] === 1'b1) ? conv2_output_q0 : maxn_1_reg_141);

assign pool2_output_address0 = tmp_18_cast_fu_277_p1;

assign pool2_output_d0 = ((grp_fu_153_p2[0:0] === 1'b1) ? maxn_reg_118 : 32'd0);

assign row_1_fu_191_p2 = (row_1_1_reg_84 + 3'd1);

assign tmp_10_fu_303_p4 = {{{channels_reg_72}, {tmp_4_reg_377}}, {tmp_6_fu_298_p2}};

assign tmp_11_fu_312_p1 = tmp_10_fu_303_p4;

assign tmp_12_cast_fu_181_p1 = tmp_fu_173_p3;

assign tmp_16_cast_fu_212_p3 = {{tmp_s_fu_207_p2}, {2'd0}};

assign tmp_18_cast_fu_277_p1 = tmp_3_fu_272_p2;

assign tmp_3_cast_fu_268_p1 = column_1_1_reg_95;

assign tmp_3_fu_272_p2 = (tmp_16_cast_reg_351 + tmp_3_cast_fu_268_p1);

assign tmp_4_fu_254_p2 = (tmp_7_reg_346 + i_cast_fu_238_p1);

assign tmp_6_fu_298_p2 = (tmp_8_reg_364 + j_cast_fu_282_p1);

assign tmp_7_fu_197_p2 = row_1_1_reg_84 << 3'd1;

assign tmp_8_cast_fu_203_p1 = row_1_1_reg_84;

assign tmp_8_fu_232_p2 = column_1_1_reg_95 << 3'd1;

assign tmp_fu_173_p3 = {{channels_reg_72}, {2'd0}};

assign tmp_s_fu_207_p2 = (tmp_12_cast_reg_333 + tmp_8_cast_fu_203_p1);

always @ (posedge ap_clk) begin
    tmp_12_cast_reg_333[1:0] <= 2'b00;
    tmp_12_cast_reg_333[5] <= 1'b0;
    tmp_7_reg_346[0] <= 1'b0;
    tmp_16_cast_reg_351[1:0] <= 2'b00;
    tmp_8_reg_364[0] <= 1'b0;
end

endmodule //MaxPooling2_layer
