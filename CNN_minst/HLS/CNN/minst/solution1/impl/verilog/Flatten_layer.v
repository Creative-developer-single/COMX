// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Flatten_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pool2_output_address0,
        pool2_output_ce0,
        pool2_output_q0,
        pool2_output_address1,
        pool2_output_ce1,
        pool2_output_q1,
        flatten_output_address0,
        flatten_output_ce0,
        flatten_output_we0,
        flatten_output_d0,
        flatten_output_address1,
        flatten_output_ce1,
        flatten_output_we1,
        flatten_output_d1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_pp0_stage0 = 10'd2;
parameter    ap_ST_fsm_pp0_stage1 = 10'd4;
parameter    ap_ST_fsm_pp0_stage2 = 10'd8;
parameter    ap_ST_fsm_pp0_stage3 = 10'd16;
parameter    ap_ST_fsm_pp0_stage4 = 10'd32;
parameter    ap_ST_fsm_pp0_stage5 = 10'd64;
parameter    ap_ST_fsm_pp0_stage6 = 10'd128;
parameter    ap_ST_fsm_pp0_stage7 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] pool2_output_address0;
output   pool2_output_ce0;
input  [31:0] pool2_output_q0;
output  [6:0] pool2_output_address1;
output   pool2_output_ce1;
input  [31:0] pool2_output_q1;
output  [6:0] flatten_output_address0;
output   flatten_output_ce0;
output   flatten_output_we0;
output  [31:0] flatten_output_d0;
output  [6:0] flatten_output_address1;
output   flatten_output_ce1;
output   flatten_output_we1;
output  [31:0] flatten_output_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] pool2_output_address0;
reg pool2_output_ce0;
reg[6:0] pool2_output_address1;
reg pool2_output_ce1;
reg[6:0] flatten_output_address0;
reg flatten_output_ce0;
reg flatten_output_we0;
reg[6:0] flatten_output_address1;
reg flatten_output_ce1;
reg flatten_output_we1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] channels_reg_362;
reg   [6:0] cnt_reg_373;
wire   [0:0] exitcond2_fu_385_p2;
reg   [0:0] exitcond2_reg_806;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] channels_7_fu_391_p2;
reg   [2:0] channels_7_reg_810;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] tmp_fu_397_p3;
reg   [6:0] tmp_reg_815;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [6:0] tmp_38_0_s_fu_453_p2;
reg   [6:0] tmp_38_0_s_reg_853;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [6:0] tmp_s_fu_550_p2;
reg   [6:0] tmp_s_reg_878;
wire   [6:0] tmp_38_1_s_fu_556_p2;
reg   [6:0] tmp_38_1_s_reg_883;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [7:0] tmp_cast4_fu_653_p1;
reg   [7:0] tmp_cast4_reg_908;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [6:0] tmp_38_3_s_fu_760_p2;
reg   [6:0] tmp_38_3_s_reg_934;
wire   [6:0] tmp_38_3_2_fu_776_p2;
reg   [6:0] tmp_38_3_2_reg_939;
wire   [6:0] cnt_1_fu_782_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage7_subdone;
reg   [2:0] ap_phi_mux_channels_phi_fu_366_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_51_fu_405_p1;
wire   [63:0] tmp_53_fu_416_p3;
wire   [63:0] tmp_55_fu_430_p3;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_57_fu_444_p3;
wire   [63:0] tmp_s_107_fu_459_p1;
wire   [63:0] tmp_39_0_1_fu_464_p1;
wire   [63:0] tmp_59_fu_474_p3;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_61_fu_488_p3;
wire   [63:0] tmp_39_0_2_fu_512_p1;
wire   [63:0] tmp_39_0_3_fu_517_p1;
wire   [63:0] tmp_63_fu_527_p3;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_65_fu_541_p3;
wire   [63:0] tmp_39_1_fu_562_p1;
wire   [63:0] tmp_39_1_1_fu_567_p1;
wire   [63:0] tmp_67_fu_577_p3;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_69_fu_591_p3;
wire   [63:0] tmp_39_1_2_fu_615_p1;
wire   [63:0] tmp_39_1_3_fu_620_p1;
wire   [63:0] tmp_71_fu_630_p3;
wire    ap_block_pp0_stage5;
wire   [63:0] tmp_73_fu_644_p3;
wire   [63:0] tmp_39_2_fu_668_p1;
wire   [63:0] tmp_39_2_1_fu_673_p1;
wire   [63:0] tmp_75_fu_683_p3;
wire    ap_block_pp0_stage6;
wire   [63:0] tmp_77_fu_697_p3;
wire   [63:0] tmp_39_2_2_fu_716_p1;
wire   [63:0] tmp_39_2_3_fu_721_p1;
wire   [63:0] tmp_79_fu_731_p3;
wire    ap_block_pp0_stage7;
wire   [63:0] tmp_81_fu_745_p3;
wire   [63:0] tmp_39_3_fu_766_p1;
wire   [63:0] tmp_39_3_1_fu_771_p1;
wire   [63:0] tmp_39_3_2_fu_797_p1;
wire   [63:0] tmp_39_3_3_fu_802_p1;
wire   [6:0] tmp_52_fu_410_p2;
wire   [6:0] tmp_54_fu_425_p2;
wire   [6:0] tmp_56_fu_439_p2;
wire   [6:0] tmp_58_fu_469_p2;
wire   [6:0] tmp_60_fu_483_p2;
wire   [7:0] tmp_38_0_cast3_fu_497_p1;
wire   [7:0] tmp_38_0_1_fu_500_p2;
wire   [6:0] tmp_38_0_2_fu_506_p2;
wire   [6:0] tmp_62_fu_522_p2;
wire   [6:0] tmp_64_fu_536_p2;
wire   [6:0] tmp_66_fu_572_p2;
wire   [6:0] tmp_68_fu_586_p2;
wire   [7:0] tmp_38_1_cast2_fu_600_p1;
wire   [7:0] tmp_38_1_1_fu_603_p2;
wire   [6:0] tmp_38_1_2_fu_609_p2;
wire   [6:0] tmp_70_fu_625_p2;
wire   [6:0] tmp_72_fu_639_p2;
wire   [7:0] tmp_1_fu_656_p2;
wire   [7:0] tmp_38_2_fu_662_p2;
wire   [6:0] tmp_74_fu_678_p2;
wire   [6:0] tmp_76_fu_692_p2;
wire   [7:0] tmp_38_2_1_fu_706_p2;
wire   [7:0] tmp_38_2_2_fu_711_p2;
wire   [6:0] tmp_78_fu_726_p2;
wire   [6:0] tmp_80_fu_740_p2;
wire   [6:0] tmp_2_fu_754_p2;
wire   [7:0] tmp_38_3_cast1_fu_788_p1;
wire   [7:0] tmp_38_3_1_fu_791_p2;
wire    ap_CS_fsm_state11;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        channels_reg_362 <= channels_7_reg_810;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        channels_reg_362 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        cnt_reg_373 <= cnt_1_fu_782_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        cnt_reg_373 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        channels_7_reg_810 <= channels_7_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_806 <= exitcond2_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_38_0_s_reg_853[6 : 1] <= tmp_38_0_s_fu_453_p2[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_38_1_s_reg_883[1] <= tmp_38_1_s_fu_556_p2[1];
tmp_38_1_s_reg_883[6 : 3] <= tmp_38_1_s_fu_556_p2[6 : 3];
        tmp_s_reg_878[1 : 0] <= tmp_s_fu_550_p2[1 : 0];
tmp_s_reg_878[6 : 3] <= tmp_s_fu_550_p2[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        tmp_38_3_2_reg_939[6 : 4] <= tmp_38_3_2_fu_776_p2[6 : 4];
        tmp_38_3_s_reg_934[1] <= tmp_38_3_s_fu_760_p2[1];
tmp_38_3_s_reg_934[6 : 4] <= tmp_38_3_s_fu_760_p2[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        tmp_cast4_reg_908[1 : 0] <= tmp_cast4_fu_653_p1[1 : 0];
tmp_cast4_reg_908[6 : 3] <= tmp_cast4_fu_653_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_fu_385_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_815[6 : 4] <= tmp_fu_397_p3[6 : 4];
    end
end

always @ (*) begin
    if ((exitcond2_fu_385_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_reg_806 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_channels_phi_fu_366_p4 = channels_7_reg_810;
    end else begin
        ap_phi_mux_channels_phi_fu_366_p4 = channels_reg_362;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        flatten_output_address0 = tmp_39_3_2_fu_797_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        flatten_output_address0 = tmp_39_3_fu_766_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        flatten_output_address0 = tmp_39_2_2_fu_716_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        flatten_output_address0 = tmp_39_2_fu_668_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        flatten_output_address0 = tmp_39_1_2_fu_615_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        flatten_output_address0 = tmp_39_1_fu_562_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        flatten_output_address0 = tmp_39_0_2_fu_512_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        flatten_output_address0 = tmp_s_107_fu_459_p1;
    end else begin
        flatten_output_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        flatten_output_address1 = tmp_39_3_3_fu_802_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        flatten_output_address1 = tmp_39_3_1_fu_771_p1;
    end else if (((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        flatten_output_address1 = tmp_39_2_3_fu_721_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        flatten_output_address1 = tmp_39_2_1_fu_673_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        flatten_output_address1 = tmp_39_1_3_fu_620_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        flatten_output_address1 = tmp_39_1_1_fu_567_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        flatten_output_address1 = tmp_39_0_3_fu_517_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        flatten_output_address1 = tmp_39_0_1_fu_464_p1;
    end else begin
        flatten_output_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        flatten_output_ce0 = 1'b1;
    end else begin
        flatten_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        flatten_output_ce1 = 1'b1;
    end else begin
        flatten_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        flatten_output_we0 = 1'b1;
    end else begin
        flatten_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((exitcond2_reg_806 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond2_reg_806 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        flatten_output_we1 = 1'b1;
    end else begin
        flatten_output_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            pool2_output_address0 = tmp_79_fu_731_p3;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            pool2_output_address0 = tmp_75_fu_683_p3;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            pool2_output_address0 = tmp_71_fu_630_p3;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            pool2_output_address0 = tmp_67_fu_577_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            pool2_output_address0 = tmp_63_fu_527_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            pool2_output_address0 = tmp_59_fu_474_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            pool2_output_address0 = tmp_55_fu_430_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pool2_output_address0 = tmp_51_fu_405_p1;
        end else begin
            pool2_output_address0 = 'bx;
        end
    end else begin
        pool2_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            pool2_output_address1 = tmp_81_fu_745_p3;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            pool2_output_address1 = tmp_77_fu_697_p3;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            pool2_output_address1 = tmp_73_fu_644_p3;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            pool2_output_address1 = tmp_69_fu_591_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            pool2_output_address1 = tmp_65_fu_541_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            pool2_output_address1 = tmp_61_fu_488_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            pool2_output_address1 = tmp_57_fu_444_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            pool2_output_address1 = tmp_53_fu_416_p3;
        end else begin
            pool2_output_address1 = 'bx;
        end
    end else begin
        pool2_output_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        pool2_output_ce0 = 1'b1;
    end else begin
        pool2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        pool2_output_ce1 = 1'b1;
    end else begin
        pool2_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond2_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond2_fu_385_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign channels_7_fu_391_p2 = (ap_phi_mux_channels_phi_fu_366_p4 + 3'd1);

assign cnt_1_fu_782_p2 = (cnt_reg_373 + 7'd16);

assign exitcond2_fu_385_p2 = ((ap_phi_mux_channels_phi_fu_366_p4 == 3'd5) ? 1'b1 : 1'b0);

assign flatten_output_d0 = pool2_output_q0;

assign flatten_output_d1 = pool2_output_q1;

assign tmp_1_fu_656_p2 = (tmp_cast4_fu_653_p1 + 8'd4);

assign tmp_2_fu_754_p2 = (cnt_reg_373 | 7'd12);

assign tmp_38_0_1_fu_500_p2 = (tmp_38_0_cast3_fu_497_p1 + 8'd1);

assign tmp_38_0_2_fu_506_p2 = (cnt_reg_373 | 7'd3);

assign tmp_38_0_cast3_fu_497_p1 = tmp_38_0_s_reg_853;

assign tmp_38_0_s_fu_453_p2 = (cnt_reg_373 | 7'd1);

assign tmp_38_1_1_fu_603_p2 = (tmp_38_1_cast2_fu_600_p1 + 8'd1);

assign tmp_38_1_2_fu_609_p2 = (cnt_reg_373 | 7'd7);

assign tmp_38_1_cast2_fu_600_p1 = tmp_38_1_s_reg_883;

assign tmp_38_1_s_fu_556_p2 = (cnt_reg_373 | 7'd5);

assign tmp_38_2_1_fu_706_p2 = (tmp_cast4_reg_908 + 8'd6);

assign tmp_38_2_2_fu_711_p2 = (tmp_cast4_reg_908 + 8'd7);

assign tmp_38_2_fu_662_p2 = (tmp_cast4_fu_653_p1 + 8'd5);

assign tmp_38_3_1_fu_791_p2 = (tmp_38_3_cast1_fu_788_p1 + 8'd1);

assign tmp_38_3_2_fu_776_p2 = (cnt_reg_373 | 7'd15);

assign tmp_38_3_cast1_fu_788_p1 = tmp_38_3_s_reg_934;

assign tmp_38_3_s_fu_760_p2 = (cnt_reg_373 | 7'd13);

assign tmp_39_0_1_fu_464_p1 = tmp_38_0_s_fu_453_p2;

assign tmp_39_0_2_fu_512_p1 = tmp_38_0_1_fu_500_p2;

assign tmp_39_0_3_fu_517_p1 = tmp_38_0_2_fu_506_p2;

assign tmp_39_1_1_fu_567_p1 = tmp_38_1_s_fu_556_p2;

assign tmp_39_1_2_fu_615_p1 = tmp_38_1_1_fu_603_p2;

assign tmp_39_1_3_fu_620_p1 = tmp_38_1_2_fu_609_p2;

assign tmp_39_1_fu_562_p1 = tmp_s_fu_550_p2;

assign tmp_39_2_1_fu_673_p1 = tmp_38_2_fu_662_p2;

assign tmp_39_2_2_fu_716_p1 = tmp_38_2_1_fu_706_p2;

assign tmp_39_2_3_fu_721_p1 = tmp_38_2_2_fu_711_p2;

assign tmp_39_2_fu_668_p1 = tmp_1_fu_656_p2;

assign tmp_39_3_1_fu_771_p1 = tmp_38_3_s_fu_760_p2;

assign tmp_39_3_2_fu_797_p1 = tmp_38_3_1_fu_791_p2;

assign tmp_39_3_3_fu_802_p1 = tmp_38_3_2_reg_939;

assign tmp_39_3_fu_766_p1 = tmp_2_fu_754_p2;

assign tmp_51_fu_405_p1 = tmp_fu_397_p3;

assign tmp_52_fu_410_p2 = (tmp_fu_397_p3 | 7'd1);

assign tmp_53_fu_416_p3 = {{57'd0}, {tmp_52_fu_410_p2}};

assign tmp_54_fu_425_p2 = (tmp_reg_815 | 7'd2);

assign tmp_55_fu_430_p3 = {{57'd0}, {tmp_54_fu_425_p2}};

assign tmp_56_fu_439_p2 = (tmp_reg_815 | 7'd3);

assign tmp_57_fu_444_p3 = {{57'd0}, {tmp_56_fu_439_p2}};

assign tmp_58_fu_469_p2 = (tmp_reg_815 | 7'd4);

assign tmp_59_fu_474_p3 = {{57'd0}, {tmp_58_fu_469_p2}};

assign tmp_60_fu_483_p2 = (tmp_reg_815 | 7'd5);

assign tmp_61_fu_488_p3 = {{57'd0}, {tmp_60_fu_483_p2}};

assign tmp_62_fu_522_p2 = (tmp_reg_815 | 7'd6);

assign tmp_63_fu_527_p3 = {{57'd0}, {tmp_62_fu_522_p2}};

assign tmp_64_fu_536_p2 = (tmp_reg_815 | 7'd7);

assign tmp_65_fu_541_p3 = {{57'd0}, {tmp_64_fu_536_p2}};

assign tmp_66_fu_572_p2 = (tmp_reg_815 | 7'd8);

assign tmp_67_fu_577_p3 = {{57'd0}, {tmp_66_fu_572_p2}};

assign tmp_68_fu_586_p2 = (tmp_reg_815 | 7'd9);

assign tmp_69_fu_591_p3 = {{57'd0}, {tmp_68_fu_586_p2}};

assign tmp_70_fu_625_p2 = (tmp_reg_815 | 7'd10);

assign tmp_71_fu_630_p3 = {{57'd0}, {tmp_70_fu_625_p2}};

assign tmp_72_fu_639_p2 = (tmp_reg_815 | 7'd11);

assign tmp_73_fu_644_p3 = {{57'd0}, {tmp_72_fu_639_p2}};

assign tmp_74_fu_678_p2 = (tmp_reg_815 | 7'd12);

assign tmp_75_fu_683_p3 = {{57'd0}, {tmp_74_fu_678_p2}};

assign tmp_76_fu_692_p2 = (tmp_reg_815 | 7'd13);

assign tmp_77_fu_697_p3 = {{57'd0}, {tmp_76_fu_692_p2}};

assign tmp_78_fu_726_p2 = (tmp_reg_815 | 7'd14);

assign tmp_79_fu_731_p3 = {{57'd0}, {tmp_78_fu_726_p2}};

assign tmp_80_fu_740_p2 = (tmp_reg_815 | 7'd15);

assign tmp_81_fu_745_p3 = {{57'd0}, {tmp_80_fu_740_p2}};

assign tmp_cast4_fu_653_p1 = tmp_s_reg_878;

assign tmp_fu_397_p3 = {{ap_phi_mux_channels_phi_fu_366_p4}, {4'd0}};

assign tmp_s_107_fu_459_p1 = cnt_reg_373;

assign tmp_s_fu_550_p2 = (cnt_reg_373 | 7'd4);

always @ (posedge ap_clk) begin
    tmp_reg_815[3:0] <= 4'b0000;
    tmp_38_0_s_reg_853[0] <= 1'b1;
    tmp_s_reg_878[2] <= 1'b1;
    tmp_38_1_s_reg_883[0] <= 1'b1;
    tmp_38_1_s_reg_883[2] <= 1'b1;
    tmp_cast4_reg_908[2] <= 1'b1;
    tmp_cast4_reg_908[7] <= 1'b0;
    tmp_38_3_s_reg_934[0] <= 1'b1;
    tmp_38_3_s_reg_934[3:2] <= 2'b11;
    tmp_38_3_2_reg_939[3:0] <= 4'b1111;
end

endmodule //Flatten_layer
