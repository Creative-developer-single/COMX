-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in : IN STD_LOGIC_VECTOR (31 downto 0);
    predict : OUT STD_LOGIC_VECTOR (31 downto 0);
    predict_ap_vld : OUT STD_LOGIC );
end;


architecture behav of run is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "run,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=12.646500,HLS_SYN_LAT=39383,HLS_SYN_TPT=none,HLS_SYN_MEM=26,HLS_SYN_DSP=30,HLS_SYN_FF=11647,HLS_SYN_LUT=9195,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal row : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal column : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal data_ce0 : STD_LOGIC;
    signal data_we0 : STD_LOGIC;
    signal data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_input_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv1_input_ce0 : STD_LOGIC;
    signal conv1_input_we0 : STD_LOGIC;
    signal conv1_input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_input_ce1 : STD_LOGIC;
    signal conv1_input_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv1_output_ce0 : STD_LOGIC;
    signal conv1_output_we0 : STD_LOGIC;
    signal conv1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pool1_output_ce0 : STD_LOGIC;
    signal pool1_output_we0 : STD_LOGIC;
    signal pool1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool1_output_ce1 : STD_LOGIC;
    signal pool1_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv2_output_ce0 : STD_LOGIC;
    signal conv2_output_we0 : STD_LOGIC;
    signal conv2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal pool2_output_ce0 : STD_LOGIC;
    signal pool2_output_we0 : STD_LOGIC;
    signal pool2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2_output_ce1 : STD_LOGIC;
    signal pool2_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal flatten_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal flatten_output_ce0 : STD_LOGIC;
    signal flatten_output_we0 : STD_LOGIC;
    signal flatten_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal flatten_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal flatten_output_ce1 : STD_LOGIC;
    signal flatten_output_we1 : STD_LOGIC;
    signal fc1_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fc1_output_ce0 : STD_LOGIC;
    signal fc1_output_we0 : STD_LOGIC;
    signal fc1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc2_output_ce0 : STD_LOGIC;
    signal fc2_output_we0 : STD_LOGIC;
    signal fc2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_wei_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal fc1_wei_ce0 : STD_LOGIC;
    signal fc1_wei_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc1_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fc1_bias_ce0 : STD_LOGIC;
    signal fc1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_725_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_796 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_i_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_801 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_i_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_cast_fu_736_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_cast_reg_806 : STD_LOGIC_VECTOR (11 downto 0);
    signal fc1_output_addr_reg_811 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_fu_746_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_reg_819 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal next_mul_fu_757_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_824 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flatten_output_load_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal fc1_wei_load_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_i_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_i_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_609_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_3_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_Conv2_layer_fu_382_ap_start : STD_LOGIC;
    signal grp_Conv2_layer_fu_382_ap_done : STD_LOGIC;
    signal grp_Conv2_layer_fu_382_ap_idle : STD_LOGIC;
    signal grp_Conv2_layer_fu_382_ap_ready : STD_LOGIC;
    signal grp_Conv2_layer_fu_382_pool1_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Conv2_layer_fu_382_pool1_output_ce0 : STD_LOGIC;
    signal grp_Conv2_layer_fu_382_pool1_output_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Conv2_layer_fu_382_pool1_output_ce1 : STD_LOGIC;
    signal grp_Conv2_layer_fu_382_conv2_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Conv2_layer_fu_382_conv2_output_ce0 : STD_LOGIC;
    signal grp_Conv2_layer_fu_382_conv2_output_we0 : STD_LOGIC;
    signal grp_Conv2_layer_fu_382_conv2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv1_layer_fu_542_ap_start : STD_LOGIC;
    signal grp_Conv1_layer_fu_542_ap_done : STD_LOGIC;
    signal grp_Conv1_layer_fu_542_ap_idle : STD_LOGIC;
    signal grp_Conv1_layer_fu_542_ap_ready : STD_LOGIC;
    signal grp_Conv1_layer_fu_542_conv1_input_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv1_layer_fu_542_conv1_input_ce0 : STD_LOGIC;
    signal grp_Conv1_layer_fu_542_conv1_input_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Conv1_layer_fu_542_conv1_input_ce1 : STD_LOGIC;
    signal grp_Conv1_layer_fu_542_conv1_output_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Conv1_layer_fu_542_conv1_output_ce0 : STD_LOGIC;
    signal grp_Conv1_layer_fu_542_conv1_output_we0 : STD_LOGIC;
    signal grp_Conv1_layer_fu_542_conv1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FC2_layer_fu_550_ap_start : STD_LOGIC;
    signal grp_FC2_layer_fu_550_ap_done : STD_LOGIC;
    signal grp_FC2_layer_fu_550_ap_idle : STD_LOGIC;
    signal grp_FC2_layer_fu_550_ap_ready : STD_LOGIC;
    signal grp_FC2_layer_fu_550_fc1_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FC2_layer_fu_550_fc1_output_ce0 : STD_LOGIC;
    signal grp_FC2_layer_fu_550_fc2_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_FC2_layer_fu_550_fc2_output_ce0 : STD_LOGIC;
    signal grp_FC2_layer_fu_550_fc2_output_we0 : STD_LOGIC;
    signal grp_FC2_layer_fu_550_fc2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FC2_layer_fu_550_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPooling1_layer_fu_563_ap_start : STD_LOGIC;
    signal grp_MaxPooling1_layer_fu_563_ap_done : STD_LOGIC;
    signal grp_MaxPooling1_layer_fu_563_ap_idle : STD_LOGIC;
    signal grp_MaxPooling1_layer_fu_563_ap_ready : STD_LOGIC;
    signal grp_MaxPooling1_layer_fu_563_conv1_output_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_MaxPooling1_layer_fu_563_conv1_output_ce0 : STD_LOGIC;
    signal grp_MaxPooling1_layer_fu_563_pool1_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MaxPooling1_layer_fu_563_pool1_output_ce0 : STD_LOGIC;
    signal grp_MaxPooling1_layer_fu_563_pool1_output_we0 : STD_LOGIC;
    signal grp_MaxPooling1_layer_fu_563_pool1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MaxPooling2_layer_fu_571_ap_start : STD_LOGIC;
    signal grp_MaxPooling2_layer_fu_571_ap_done : STD_LOGIC;
    signal grp_MaxPooling2_layer_fu_571_ap_idle : STD_LOGIC;
    signal grp_MaxPooling2_layer_fu_571_ap_ready : STD_LOGIC;
    signal grp_MaxPooling2_layer_fu_571_conv2_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MaxPooling2_layer_fu_571_conv2_output_ce0 : STD_LOGIC;
    signal grp_MaxPooling2_layer_fu_571_pool2_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_MaxPooling2_layer_fu_571_pool2_output_ce0 : STD_LOGIC;
    signal grp_MaxPooling2_layer_fu_571_pool2_output_we0 : STD_LOGIC;
    signal grp_MaxPooling2_layer_fu_571_pool2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Init_fu_579_ap_start : STD_LOGIC;
    signal grp_Init_fu_579_ap_done : STD_LOGIC;
    signal grp_Init_fu_579_ap_idle : STD_LOGIC;
    signal grp_Init_fu_579_ap_ready : STD_LOGIC;
    signal grp_Init_fu_579_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Init_fu_579_data_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_conv1_input_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_Init_fu_579_conv1_input_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_conv1_input_we0 : STD_LOGIC;
    signal grp_Init_fu_579_conv1_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Init_fu_579_conv1_output_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Init_fu_579_conv1_output_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_conv1_output_we0 : STD_LOGIC;
    signal grp_Init_fu_579_conv1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Init_fu_579_pool1_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Init_fu_579_pool1_output_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_pool1_output_we0 : STD_LOGIC;
    signal grp_Init_fu_579_pool1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Init_fu_579_conv2_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Init_fu_579_conv2_output_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_conv2_output_we0 : STD_LOGIC;
    signal grp_Init_fu_579_conv2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Init_fu_579_pool2_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Init_fu_579_pool2_output_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_pool2_output_we0 : STD_LOGIC;
    signal grp_Init_fu_579_pool2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Init_fu_579_flatten_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Init_fu_579_flatten_output_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_flatten_output_we0 : STD_LOGIC;
    signal grp_Init_fu_579_flatten_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Init_fu_579_fc1_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Init_fu_579_fc1_output_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_fc1_output_we0 : STD_LOGIC;
    signal grp_Init_fu_579_fc1_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Init_fu_579_fc2_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Init_fu_579_fc2_output_ce0 : STD_LOGIC;
    signal grp_Init_fu_579_fc2_output_we0 : STD_LOGIC;
    signal grp_Init_fu_579_fc2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Flatten_layer_fu_601_ap_start : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_ap_done : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_ap_idle : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_ap_ready : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_pool2_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Flatten_layer_fu_601_pool2_output_ce0 : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_pool2_output_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Flatten_layer_fu_601_pool2_output_ce1 : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_flatten_output_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Flatten_layer_fu_601_flatten_output_ce0 : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_flatten_output_we0 : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_flatten_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Flatten_layer_fu_601_flatten_output_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_Flatten_layer_fu_601_flatten_output_ce1 : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_flatten_output_we1 : STD_LOGIC;
    signal grp_Flatten_layer_fu_601_flatten_output_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_new_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_349 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal k_i_reg_360 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal phi_mul_reg_371 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_Conv2_layer_fu_382_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_Conv1_layer_fu_542_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_FC2_layer_fu_550_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_MaxPooling1_layer_fu_563_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_MaxPooling2_layer_fu_571_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_Init_fu_579_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_Flatten_layer_fu_601_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_8_cast_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_i_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state27_on_subcall_done : BOOLEAN;
    signal tmp_43_i_fu_773_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_654_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_666_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_658_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_670_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_650_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_678_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_684_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_763_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_42_i_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_condition_189 : BOOLEAN;

    component Conv2_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pool1_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pool1_output_ce0 : OUT STD_LOGIC;
        pool1_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pool1_output_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pool1_output_ce1 : OUT STD_LOGIC;
        pool1_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv2_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv2_output_ce0 : OUT STD_LOGIC;
        conv2_output_we0 : OUT STD_LOGIC;
        conv2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv2_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv1_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv1_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv1_input_ce0 : OUT STD_LOGIC;
        conv1_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_input_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv1_input_ce1 : OUT STD_LOGIC;
        conv1_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_output_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv1_output_ce0 : OUT STD_LOGIC;
        conv1_output_we0 : OUT STD_LOGIC;
        conv1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv1_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FC2_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fc1_output_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fc1_output_ce0 : OUT STD_LOGIC;
        fc1_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fc2_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        fc2_output_ce0 : OUT STD_LOGIC;
        fc2_output_we0 : OUT STD_LOGIC;
        fc2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc2_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MaxPooling1_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv1_output_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv1_output_ce0 : OUT STD_LOGIC;
        conv1_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pool1_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pool1_output_ce0 : OUT STD_LOGIC;
        pool1_output_we0 : OUT STD_LOGIC;
        pool1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component MaxPooling2_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv2_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv2_output_ce0 : OUT STD_LOGIC;
        conv2_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pool2_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        pool2_output_ce0 : OUT STD_LOGIC;
        pool2_output_we0 : OUT STD_LOGIC;
        pool2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv1_input_ce0 : OUT STD_LOGIC;
        conv1_input_we0 : OUT STD_LOGIC;
        conv1_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv1_output_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv1_output_ce0 : OUT STD_LOGIC;
        conv1_output_we0 : OUT STD_LOGIC;
        conv1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool1_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        pool1_output_ce0 : OUT STD_LOGIC;
        pool1_output_we0 : OUT STD_LOGIC;
        pool1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv2_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv2_output_ce0 : OUT STD_LOGIC;
        conv2_output_we0 : OUT STD_LOGIC;
        conv2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        pool2_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        pool2_output_ce0 : OUT STD_LOGIC;
        pool2_output_we0 : OUT STD_LOGIC;
        pool2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        flatten_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        flatten_output_ce0 : OUT STD_LOGIC;
        flatten_output_we0 : OUT STD_LOGIC;
        flatten_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc1_output_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fc1_output_ce0 : OUT STD_LOGIC;
        fc1_output_we0 : OUT STD_LOGIC;
        fc1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc2_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        fc2_output_ce0 : OUT STD_LOGIC;
        fc2_output_we0 : OUT STD_LOGIC;
        fc2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Flatten_layer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pool2_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        pool2_output_ce0 : OUT STD_LOGIC;
        pool2_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pool2_output_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        pool2_output_ce1 : OUT STD_LOGIC;
        pool2_output_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        flatten_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        flatten_output_ce0 : OUT STD_LOGIC;
        flatten_output_we0 : OUT STD_LOGIC;
        flatten_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        flatten_output_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        flatten_output_ce1 : OUT STD_LOGIC;
        flatten_output_we1 : OUT STD_LOGIC;
        flatten_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fcmp_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component run_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_conv1_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_conv1_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_pool1_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_conv2_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_pool2_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_flatten_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fc1_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fc2_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fc1_wei IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_fc1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    data_U : component run_data
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_address0,
        ce0 => data_ce0,
        we0 => data_we0,
        d0 => data_in,
        q0 => data_q0);

    conv1_input_U : component run_conv1_input
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_input_address0,
        ce0 => conv1_input_ce0,
        we0 => conv1_input_we0,
        d0 => grp_Init_fu_579_conv1_input_d0,
        q0 => conv1_input_q0,
        address1 => grp_Conv1_layer_fu_542_conv1_input_address1,
        ce1 => conv1_input_ce1,
        q1 => conv1_input_q1);

    conv1_output_U : component run_conv1_output
    generic map (
        DataWidth => 32,
        AddressRange => 1728,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv1_output_address0,
        ce0 => conv1_output_ce0,
        we0 => conv1_output_we0,
        d0 => conv1_output_d0,
        q0 => conv1_output_q0);

    pool1_output_U : component run_pool1_output
    generic map (
        DataWidth => 32,
        AddressRange => 432,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool1_output_address0,
        ce0 => pool1_output_ce0,
        we0 => pool1_output_we0,
        d0 => pool1_output_d0,
        q0 => pool1_output_q0,
        address1 => grp_Conv2_layer_fu_382_pool1_output_address1,
        ce1 => pool1_output_ce1,
        q1 => pool1_output_q1);

    conv2_output_U : component run_conv2_output
    generic map (
        DataWidth => 32,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_output_address0,
        ce0 => conv2_output_ce0,
        we0 => conv2_output_we0,
        d0 => conv2_output_d0,
        q0 => conv2_output_q0);

    pool2_output_U : component run_pool2_output
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pool2_output_address0,
        ce0 => pool2_output_ce0,
        we0 => pool2_output_we0,
        d0 => pool2_output_d0,
        q0 => pool2_output_q0,
        address1 => grp_Flatten_layer_fu_601_pool2_output_address1,
        ce1 => pool2_output_ce1,
        q1 => pool2_output_q1);

    flatten_output_U : component run_flatten_output
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => flatten_output_address0,
        ce0 => flatten_output_ce0,
        we0 => flatten_output_we0,
        d0 => flatten_output_d0,
        q0 => flatten_output_q0,
        address1 => grp_Flatten_layer_fu_601_flatten_output_address1,
        ce1 => flatten_output_ce1,
        we1 => flatten_output_we1,
        d1 => grp_Flatten_layer_fu_601_flatten_output_d1);

    fc1_output_U : component run_fc1_output
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_output_address0,
        ce0 => fc1_output_ce0,
        we0 => fc1_output_we0,
        d0 => fc1_output_d0,
        q0 => fc1_output_q0);

    fc2_output_U : component run_fc2_output
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc2_output_address0,
        ce0 => fc2_output_ce0,
        we0 => fc2_output_we0,
        d0 => fc2_output_d0,
        q0 => fc2_output_q0);

    fc1_wei_U : component run_fc1_wei
    generic map (
        DataWidth => 32,
        AddressRange => 4000,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_wei_address0,
        ce0 => fc1_wei_ce0,
        q0 => fc1_wei_q0);

    fc1_bias_U : component run_fc1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc1_bias_address0,
        ce0 => fc1_bias_ce0,
        q0 => fc1_bias_q0);

    grp_Conv2_layer_fu_382 : component Conv2_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv2_layer_fu_382_ap_start,
        ap_done => grp_Conv2_layer_fu_382_ap_done,
        ap_idle => grp_Conv2_layer_fu_382_ap_idle,
        ap_ready => grp_Conv2_layer_fu_382_ap_ready,
        pool1_output_address0 => grp_Conv2_layer_fu_382_pool1_output_address0,
        pool1_output_ce0 => grp_Conv2_layer_fu_382_pool1_output_ce0,
        pool1_output_q0 => pool1_output_q0,
        pool1_output_address1 => grp_Conv2_layer_fu_382_pool1_output_address1,
        pool1_output_ce1 => grp_Conv2_layer_fu_382_pool1_output_ce1,
        pool1_output_q1 => pool1_output_q1,
        conv2_output_address0 => grp_Conv2_layer_fu_382_conv2_output_address0,
        conv2_output_ce0 => grp_Conv2_layer_fu_382_conv2_output_ce0,
        conv2_output_we0 => grp_Conv2_layer_fu_382_conv2_output_we0,
        conv2_output_d0 => grp_Conv2_layer_fu_382_conv2_output_d0,
        conv2_output_q0 => conv2_output_q0);

    grp_Conv1_layer_fu_542 : component Conv1_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Conv1_layer_fu_542_ap_start,
        ap_done => grp_Conv1_layer_fu_542_ap_done,
        ap_idle => grp_Conv1_layer_fu_542_ap_idle,
        ap_ready => grp_Conv1_layer_fu_542_ap_ready,
        conv1_input_address0 => grp_Conv1_layer_fu_542_conv1_input_address0,
        conv1_input_ce0 => grp_Conv1_layer_fu_542_conv1_input_ce0,
        conv1_input_q0 => conv1_input_q0,
        conv1_input_address1 => grp_Conv1_layer_fu_542_conv1_input_address1,
        conv1_input_ce1 => grp_Conv1_layer_fu_542_conv1_input_ce1,
        conv1_input_q1 => conv1_input_q1,
        conv1_output_address0 => grp_Conv1_layer_fu_542_conv1_output_address0,
        conv1_output_ce0 => grp_Conv1_layer_fu_542_conv1_output_ce0,
        conv1_output_we0 => grp_Conv1_layer_fu_542_conv1_output_we0,
        conv1_output_d0 => grp_Conv1_layer_fu_542_conv1_output_d0,
        conv1_output_q0 => conv1_output_q0);

    grp_FC2_layer_fu_550 : component FC2_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FC2_layer_fu_550_ap_start,
        ap_done => grp_FC2_layer_fu_550_ap_done,
        ap_idle => grp_FC2_layer_fu_550_ap_idle,
        ap_ready => grp_FC2_layer_fu_550_ap_ready,
        fc1_output_address0 => grp_FC2_layer_fu_550_fc1_output_address0,
        fc1_output_ce0 => grp_FC2_layer_fu_550_fc1_output_ce0,
        fc1_output_q0 => fc1_output_q0,
        fc2_output_address0 => grp_FC2_layer_fu_550_fc2_output_address0,
        fc2_output_ce0 => grp_FC2_layer_fu_550_fc2_output_ce0,
        fc2_output_we0 => grp_FC2_layer_fu_550_fc2_output_we0,
        fc2_output_d0 => grp_FC2_layer_fu_550_fc2_output_d0,
        fc2_output_q0 => fc2_output_q0,
        ap_return => grp_FC2_layer_fu_550_ap_return);

    grp_MaxPooling1_layer_fu_563 : component MaxPooling1_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MaxPooling1_layer_fu_563_ap_start,
        ap_done => grp_MaxPooling1_layer_fu_563_ap_done,
        ap_idle => grp_MaxPooling1_layer_fu_563_ap_idle,
        ap_ready => grp_MaxPooling1_layer_fu_563_ap_ready,
        conv1_output_address0 => grp_MaxPooling1_layer_fu_563_conv1_output_address0,
        conv1_output_ce0 => grp_MaxPooling1_layer_fu_563_conv1_output_ce0,
        conv1_output_q0 => conv1_output_q0,
        pool1_output_address0 => grp_MaxPooling1_layer_fu_563_pool1_output_address0,
        pool1_output_ce0 => grp_MaxPooling1_layer_fu_563_pool1_output_ce0,
        pool1_output_we0 => grp_MaxPooling1_layer_fu_563_pool1_output_we0,
        pool1_output_d0 => grp_MaxPooling1_layer_fu_563_pool1_output_d0);

    grp_MaxPooling2_layer_fu_571 : component MaxPooling2_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MaxPooling2_layer_fu_571_ap_start,
        ap_done => grp_MaxPooling2_layer_fu_571_ap_done,
        ap_idle => grp_MaxPooling2_layer_fu_571_ap_idle,
        ap_ready => grp_MaxPooling2_layer_fu_571_ap_ready,
        conv2_output_address0 => grp_MaxPooling2_layer_fu_571_conv2_output_address0,
        conv2_output_ce0 => grp_MaxPooling2_layer_fu_571_conv2_output_ce0,
        conv2_output_q0 => conv2_output_q0,
        pool2_output_address0 => grp_MaxPooling2_layer_fu_571_pool2_output_address0,
        pool2_output_ce0 => grp_MaxPooling2_layer_fu_571_pool2_output_ce0,
        pool2_output_we0 => grp_MaxPooling2_layer_fu_571_pool2_output_we0,
        pool2_output_d0 => grp_MaxPooling2_layer_fu_571_pool2_output_d0);

    grp_Init_fu_579 : component Init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Init_fu_579_ap_start,
        ap_done => grp_Init_fu_579_ap_done,
        ap_idle => grp_Init_fu_579_ap_idle,
        ap_ready => grp_Init_fu_579_ap_ready,
        data_address0 => grp_Init_fu_579_data_address0,
        data_ce0 => grp_Init_fu_579_data_ce0,
        data_q0 => data_q0,
        conv1_input_address0 => grp_Init_fu_579_conv1_input_address0,
        conv1_input_ce0 => grp_Init_fu_579_conv1_input_ce0,
        conv1_input_we0 => grp_Init_fu_579_conv1_input_we0,
        conv1_input_d0 => grp_Init_fu_579_conv1_input_d0,
        conv1_output_address0 => grp_Init_fu_579_conv1_output_address0,
        conv1_output_ce0 => grp_Init_fu_579_conv1_output_ce0,
        conv1_output_we0 => grp_Init_fu_579_conv1_output_we0,
        conv1_output_d0 => grp_Init_fu_579_conv1_output_d0,
        pool1_output_address0 => grp_Init_fu_579_pool1_output_address0,
        pool1_output_ce0 => grp_Init_fu_579_pool1_output_ce0,
        pool1_output_we0 => grp_Init_fu_579_pool1_output_we0,
        pool1_output_d0 => grp_Init_fu_579_pool1_output_d0,
        conv2_output_address0 => grp_Init_fu_579_conv2_output_address0,
        conv2_output_ce0 => grp_Init_fu_579_conv2_output_ce0,
        conv2_output_we0 => grp_Init_fu_579_conv2_output_we0,
        conv2_output_d0 => grp_Init_fu_579_conv2_output_d0,
        pool2_output_address0 => grp_Init_fu_579_pool2_output_address0,
        pool2_output_ce0 => grp_Init_fu_579_pool2_output_ce0,
        pool2_output_we0 => grp_Init_fu_579_pool2_output_we0,
        pool2_output_d0 => grp_Init_fu_579_pool2_output_d0,
        flatten_output_address0 => grp_Init_fu_579_flatten_output_address0,
        flatten_output_ce0 => grp_Init_fu_579_flatten_output_ce0,
        flatten_output_we0 => grp_Init_fu_579_flatten_output_we0,
        flatten_output_d0 => grp_Init_fu_579_flatten_output_d0,
        fc1_output_address0 => grp_Init_fu_579_fc1_output_address0,
        fc1_output_ce0 => grp_Init_fu_579_fc1_output_ce0,
        fc1_output_we0 => grp_Init_fu_579_fc1_output_we0,
        fc1_output_d0 => grp_Init_fu_579_fc1_output_d0,
        fc2_output_address0 => grp_Init_fu_579_fc2_output_address0,
        fc2_output_ce0 => grp_Init_fu_579_fc2_output_ce0,
        fc2_output_we0 => grp_Init_fu_579_fc2_output_we0,
        fc2_output_d0 => grp_Init_fu_579_fc2_output_d0);

    grp_Flatten_layer_fu_601 : component Flatten_layer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Flatten_layer_fu_601_ap_start,
        ap_done => grp_Flatten_layer_fu_601_ap_done,
        ap_idle => grp_Flatten_layer_fu_601_ap_idle,
        ap_ready => grp_Flatten_layer_fu_601_ap_ready,
        pool2_output_address0 => grp_Flatten_layer_fu_601_pool2_output_address0,
        pool2_output_ce0 => grp_Flatten_layer_fu_601_pool2_output_ce0,
        pool2_output_q0 => pool2_output_q0,
        pool2_output_address1 => grp_Flatten_layer_fu_601_pool2_output_address1,
        pool2_output_ce1 => grp_Flatten_layer_fu_601_pool2_output_ce1,
        pool2_output_q1 => pool2_output_q1,
        flatten_output_address0 => grp_Flatten_layer_fu_601_flatten_output_address0,
        flatten_output_ce0 => grp_Flatten_layer_fu_601_flatten_output_ce0,
        flatten_output_we0 => grp_Flatten_layer_fu_601_flatten_output_we0,
        flatten_output_d0 => grp_Flatten_layer_fu_601_flatten_output_d0,
        flatten_output_address1 => grp_Flatten_layer_fu_601_flatten_output_address1,
        flatten_output_ce1 => grp_Flatten_layer_fu_601_flatten_output_ce1,
        flatten_output_we1 => grp_Flatten_layer_fu_601_flatten_output_we1,
        flatten_output_d1 => grp_Flatten_layer_fu_601_flatten_output_d1);

    run_fadd_32ns_32nbkb_U143 : component run_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fc1_output_q0,
        din1 => grp_fu_609_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_609_p2);

    run_fmul_32ns_32ncud_U144 : component run_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => flatten_output_load_reg_844,
        din1 => fc1_wei_load_reg_849,
        dout => tmp_45_i_fu_616_p2);

    run_fcmp_32ns_32ndEe_U145 : component run_fcmp_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_i_3_reg_864,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_42_i_fu_620_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Conv1_layer_fu_542_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv1_layer_fu_542_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_Conv1_layer_fu_542_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv1_layer_fu_542_ap_ready = ap_const_logic_1)) then 
                    grp_Conv1_layer_fu_542_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Conv2_layer_fu_382_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Conv2_layer_fu_382_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_Conv2_layer_fu_382_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv2_layer_fu_382_ap_ready = ap_const_logic_1)) then 
                    grp_Conv2_layer_fu_382_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FC2_layer_fu_550_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FC2_layer_fu_550_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_i_fu_719_p2 = ap_const_lv1_1))) then 
                    grp_FC2_layer_fu_550_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FC2_layer_fu_550_ap_ready = ap_const_logic_1)) then 
                    grp_FC2_layer_fu_550_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Flatten_layer_fu_601_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Flatten_layer_fu_601_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_Flatten_layer_fu_601_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Flatten_layer_fu_601_ap_ready = ap_const_logic_1)) then 
                    grp_Flatten_layer_fu_601_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Init_fu_579_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Init_fu_579_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_634_p2 = ap_const_lv1_1))) then 
                    grp_Init_fu_579_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Init_fu_579_ap_ready = ap_const_logic_1)) then 
                    grp_Init_fu_579_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MaxPooling1_layer_fu_563_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MaxPooling1_layer_fu_563_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_MaxPooling1_layer_fu_563_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MaxPooling1_layer_fu_563_ap_ready = ap_const_logic_1)) then 
                    grp_MaxPooling1_layer_fu_563_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_MaxPooling2_layer_fu_571_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MaxPooling2_layer_fu_571_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_MaxPooling2_layer_fu_571_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MaxPooling2_layer_fu_571_ap_ready = ap_const_logic_1)) then 
                    grp_MaxPooling2_layer_fu_571_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    column_new_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_189)) then
                if ((tmp_4_fu_695_p2 = ap_const_lv1_0)) then 
                    column_new_reg_338 <= tmp_1_fu_644_p2;
                elsif ((tmp_4_fu_695_p2 = ap_const_lv1_1)) then 
                    column_new_reg_338 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    i_i_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_i_reg_349 <= i_reg_796;
            elsif (((grp_Flatten_layer_fu_601_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_i_reg_349 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    k_i_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                k_i_reg_360 <= k_reg_819;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_i_fu_719_p2 = ap_const_lv1_0))) then 
                k_i_reg_360 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                phi_mul_reg_371 <= next_mul_reg_824;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_i_fu_719_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_371 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                column <= column_new_reg_338;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_i_fu_719_p2 = ap_const_lv1_0))) then
                fc1_output_addr_reg_811 <= tmp_i_fu_731_p1(6 - 1 downto 0);
                    tmp_i_cast_reg_806(5 downto 0) <= tmp_i_cast_fu_736_p1(5 downto 0);
                    tmp_i_reg_801(5 downto 0) <= tmp_i_fu_731_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                fc1_wei_load_reg_849 <= fc1_wei_q0;
                flatten_output_load_reg_844 <= flatten_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_reg_796 <= i_fu_725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                k_reg_819 <= k_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond_i_fu_740_p2 = ap_const_lv1_0))) then
                next_mul_reg_824 <= next_mul_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (tmp_4_fu_695_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_634_p2 = ap_const_lv1_0))) then
                row <= tmp_5_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp_45_i_reg_854 <= tmp_45_i_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_i_3_reg_864 <= grp_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_781 <= tmp_fu_634_p2;
            end if;
        end if;
    end process;
    tmp_i_reg_801(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_i_cast_reg_806(11 downto 6) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_634_p2, ap_CS_fsm_state14, exitcond1_i_fu_719_p2, ap_CS_fsm_state15, exitcond_i_fu_740_p2, grp_Conv2_layer_fu_382_ap_done, grp_Conv1_layer_fu_542_ap_done, grp_MaxPooling1_layer_fu_563_ap_done, grp_MaxPooling2_layer_fu_571_ap_done, grp_Init_fu_579_ap_done, grp_Flatten_layer_fu_601_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state5, ap_CS_fsm_state27, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_block_state27_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_634_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_634_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state3 => 
                if (((grp_Init_fu_579_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_Conv1_layer_fu_542_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_MaxPooling1_layer_fu_563_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_Conv2_layer_fu_382_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_MaxPooling2_layer_fu_571_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_Flatten_layer_fu_601_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond1_i_fu_719_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state15 => 
                if (((exitcond_i_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_boolean_0 = ap_block_state27_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state27_on_subcall_done_assign_proc : process(tmp_reg_781, grp_FC2_layer_fu_550_ap_done)
    begin
                ap_block_state27_on_subcall_done <= ((grp_FC2_layer_fu_550_ap_done = ap_const_logic_0) and (tmp_reg_781 = ap_const_lv1_1));
    end process;


    ap_condition_189_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_634_p2)
    begin
                ap_condition_189 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_634_p2 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state27, ap_block_state27_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_boolean_0 = ap_block_state27_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state27, ap_block_state27_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_boolean_0 = ap_block_state27_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    conv1_input_address0_assign_proc : process(grp_Conv1_layer_fu_542_conv1_input_address0, grp_Init_fu_579_conv1_input_address0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1_input_address0 <= grp_Init_fu_579_conv1_input_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_input_address0 <= grp_Conv1_layer_fu_542_conv1_input_address0;
        else 
            conv1_input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv1_input_ce0_assign_proc : process(grp_Conv1_layer_fu_542_conv1_input_ce0, grp_Init_fu_579_conv1_input_ce0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1_input_ce0 <= grp_Init_fu_579_conv1_input_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_input_ce0 <= grp_Conv1_layer_fu_542_conv1_input_ce0;
        else 
            conv1_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_input_ce1_assign_proc : process(grp_Conv1_layer_fu_542_conv1_input_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_input_ce1 <= grp_Conv1_layer_fu_542_conv1_input_ce1;
        else 
            conv1_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_input_we0_assign_proc : process(grp_Init_fu_579_conv1_input_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1_input_we0 <= grp_Init_fu_579_conv1_input_we0;
        else 
            conv1_input_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_address0_assign_proc : process(grp_Conv1_layer_fu_542_conv1_output_address0, grp_MaxPooling1_layer_fu_563_conv1_output_address0, grp_Init_fu_579_conv1_output_address0, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1_output_address0 <= grp_Init_fu_579_conv1_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv1_output_address0 <= grp_MaxPooling1_layer_fu_563_conv1_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_output_address0 <= grp_Conv1_layer_fu_542_conv1_output_address0;
        else 
            conv1_output_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_ce0_assign_proc : process(grp_Conv1_layer_fu_542_conv1_output_ce0, grp_MaxPooling1_layer_fu_563_conv1_output_ce0, grp_Init_fu_579_conv1_output_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1_output_ce0 <= grp_Init_fu_579_conv1_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv1_output_ce0 <= grp_MaxPooling1_layer_fu_563_conv1_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_output_ce0 <= grp_Conv1_layer_fu_542_conv1_output_ce0;
        else 
            conv1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_d0_assign_proc : process(grp_Conv1_layer_fu_542_conv1_output_d0, grp_Init_fu_579_conv1_output_d0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1_output_d0 <= grp_Init_fu_579_conv1_output_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_output_d0 <= grp_Conv1_layer_fu_542_conv1_output_d0;
        else 
            conv1_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_we0_assign_proc : process(grp_Conv1_layer_fu_542_conv1_output_we0, grp_Init_fu_579_conv1_output_we0, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv1_output_we0 <= grp_Init_fu_579_conv1_output_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv1_output_we0 <= grp_Conv1_layer_fu_542_conv1_output_we0;
        else 
            conv1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_address0_assign_proc : process(grp_Conv2_layer_fu_382_conv2_output_address0, grp_MaxPooling2_layer_fu_571_conv2_output_address0, grp_Init_fu_579_conv2_output_address0, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv2_output_address0 <= grp_Init_fu_579_conv2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv2_output_address0 <= grp_MaxPooling2_layer_fu_571_conv2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv2_output_address0 <= grp_Conv2_layer_fu_382_conv2_output_address0;
        else 
            conv2_output_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    conv2_output_ce0_assign_proc : process(grp_Conv2_layer_fu_382_conv2_output_ce0, grp_MaxPooling2_layer_fu_571_conv2_output_ce0, grp_Init_fu_579_conv2_output_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv2_output_ce0 <= grp_Init_fu_579_conv2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv2_output_ce0 <= grp_MaxPooling2_layer_fu_571_conv2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv2_output_ce0 <= grp_Conv2_layer_fu_382_conv2_output_ce0;
        else 
            conv2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv2_output_d0_assign_proc : process(grp_Conv2_layer_fu_382_conv2_output_d0, grp_Init_fu_579_conv2_output_d0, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv2_output_d0 <= grp_Init_fu_579_conv2_output_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv2_output_d0 <= grp_Conv2_layer_fu_382_conv2_output_d0;
        else 
            conv2_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv2_output_we0_assign_proc : process(grp_Conv2_layer_fu_382_conv2_output_we0, grp_Init_fu_579_conv2_output_we0, ap_CS_fsm_state9, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv2_output_we0 <= grp_Init_fu_579_conv2_output_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv2_output_we0 <= grp_Conv2_layer_fu_382_conv2_output_we0;
        else 
            conv2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_634_p2, grp_Init_fu_579_data_address0, ap_CS_fsm_state3, tmp_8_cast_fu_690_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_634_p2 = ap_const_lv1_0))) then 
            data_address0 <= tmp_8_cast_fu_690_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address0 <= grp_Init_fu_579_data_address0;
        else 
            data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_634_p2, grp_Init_fu_579_data_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_634_p2 = ap_const_lv1_0))) then 
            data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_ce0 <= grp_Init_fu_579_data_ce0;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_634_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_634_p2 = ap_const_lv1_0))) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_i_fu_719_p2 <= "1" when (i_i_reg_349 = ap_const_lv6_32) else "0";
    exitcond_i_fu_740_p2 <= "1" when (k_i_reg_360 = ap_const_lv7_50) else "0";
    fc1_bias_address0 <= tmp_i_reg_801(6 - 1 downto 0);

    fc1_bias_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc1_bias_ce0 <= ap_const_logic_1;
        else 
            fc1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1_output_address0_assign_proc : process(tmp_reg_781, fc1_output_addr_reg_811, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_FC2_layer_fu_550_fc1_output_address0, grp_Init_fu_579_fc1_output_address0, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            fc1_output_address0 <= fc1_output_addr_reg_811;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc1_output_address0 <= grp_Init_fu_579_fc1_output_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_reg_781 = ap_const_lv1_1))) then 
            fc1_output_address0 <= grp_FC2_layer_fu_550_fc1_output_address0;
        else 
            fc1_output_address0 <= "XXXXXX";
        end if; 
    end process;


    fc1_output_ce0_assign_proc : process(tmp_reg_781, ap_CS_fsm_state15, ap_CS_fsm_state17, grp_FC2_layer_fu_550_fc1_output_ce0, grp_Init_fu_579_fc1_output_ce0, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state27, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            fc1_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc1_output_ce0 <= grp_Init_fu_579_fc1_output_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_reg_781 = ap_const_lv1_1))) then 
            fc1_output_ce0 <= grp_FC2_layer_fu_550_fc1_output_ce0;
        else 
            fc1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc1_output_d0_assign_proc : process(grp_fu_609_p2, grp_Init_fu_579_fc1_output_d0, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state3, tmp_43_i_fu_773_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            fc1_output_d0 <= tmp_43_i_fu_773_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            fc1_output_d0 <= grp_fu_609_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc1_output_d0 <= grp_Init_fu_579_fc1_output_d0;
        else 
            fc1_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc1_output_we0_assign_proc : process(grp_Init_fu_579_fc1_output_we0, ap_CS_fsm_state26, ap_CS_fsm_state21, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            fc1_output_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc1_output_we0 <= grp_Init_fu_579_fc1_output_we0;
        else 
            fc1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fc1_wei_address0 <= tmp_10_cast_fu_768_p1(12 - 1 downto 0);

    fc1_wei_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            fc1_wei_ce0 <= ap_const_logic_1;
        else 
            fc1_wei_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc2_output_address0_assign_proc : process(tmp_reg_781, grp_FC2_layer_fu_550_fc2_output_address0, grp_Init_fu_579_fc2_output_address0, ap_CS_fsm_state27, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc2_output_address0 <= grp_Init_fu_579_fc2_output_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_reg_781 = ap_const_lv1_1))) then 
            fc2_output_address0 <= grp_FC2_layer_fu_550_fc2_output_address0;
        else 
            fc2_output_address0 <= "XXXX";
        end if; 
    end process;


    fc2_output_ce0_assign_proc : process(tmp_reg_781, grp_FC2_layer_fu_550_fc2_output_ce0, grp_Init_fu_579_fc2_output_ce0, ap_CS_fsm_state27, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc2_output_ce0 <= grp_Init_fu_579_fc2_output_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_reg_781 = ap_const_lv1_1))) then 
            fc2_output_ce0 <= grp_FC2_layer_fu_550_fc2_output_ce0;
        else 
            fc2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc2_output_d0_assign_proc : process(tmp_reg_781, grp_FC2_layer_fu_550_fc2_output_d0, grp_Init_fu_579_fc2_output_d0, ap_CS_fsm_state27, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc2_output_d0 <= grp_Init_fu_579_fc2_output_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_reg_781 = ap_const_lv1_1))) then 
            fc2_output_d0 <= grp_FC2_layer_fu_550_fc2_output_d0;
        else 
            fc2_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fc2_output_we0_assign_proc : process(tmp_reg_781, grp_FC2_layer_fu_550_fc2_output_we0, grp_Init_fu_579_fc2_output_we0, ap_CS_fsm_state27, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc2_output_we0 <= grp_Init_fu_579_fc2_output_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_reg_781 = ap_const_lv1_1))) then 
            fc2_output_we0 <= grp_FC2_layer_fu_550_fc2_output_we0;
        else 
            fc2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten_output_address0_assign_proc : process(ap_CS_fsm_state15, grp_Init_fu_579_flatten_output_address0, grp_Flatten_layer_fu_601_flatten_output_address0, ap_CS_fsm_state13, ap_CS_fsm_state3, tmp_44_i_fu_752_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            flatten_output_address0 <= tmp_44_i_fu_752_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flatten_output_address0 <= grp_Flatten_layer_fu_601_flatten_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten_output_address0 <= grp_Init_fu_579_flatten_output_address0;
        else 
            flatten_output_address0 <= "XXXXXXX";
        end if; 
    end process;


    flatten_output_ce0_assign_proc : process(ap_CS_fsm_state15, grp_Init_fu_579_flatten_output_ce0, grp_Flatten_layer_fu_601_flatten_output_ce0, ap_CS_fsm_state13, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            flatten_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flatten_output_ce0 <= grp_Flatten_layer_fu_601_flatten_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten_output_ce0 <= grp_Init_fu_579_flatten_output_ce0;
        else 
            flatten_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten_output_ce1_assign_proc : process(grp_Flatten_layer_fu_601_flatten_output_ce1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flatten_output_ce1 <= grp_Flatten_layer_fu_601_flatten_output_ce1;
        else 
            flatten_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    flatten_output_d0_assign_proc : process(grp_Init_fu_579_flatten_output_d0, grp_Flatten_layer_fu_601_flatten_output_d0, ap_CS_fsm_state13, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flatten_output_d0 <= grp_Flatten_layer_fu_601_flatten_output_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten_output_d0 <= grp_Init_fu_579_flatten_output_d0;
        else 
            flatten_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    flatten_output_we0_assign_proc : process(grp_Init_fu_579_flatten_output_we0, grp_Flatten_layer_fu_601_flatten_output_we0, ap_CS_fsm_state13, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flatten_output_we0 <= grp_Flatten_layer_fu_601_flatten_output_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flatten_output_we0 <= grp_Init_fu_579_flatten_output_we0;
        else 
            flatten_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flatten_output_we1_assign_proc : process(grp_Flatten_layer_fu_601_flatten_output_we1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flatten_output_we1 <= grp_Flatten_layer_fu_601_flatten_output_we1;
        else 
            flatten_output_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Conv1_layer_fu_542_ap_start <= grp_Conv1_layer_fu_542_ap_start_reg;
    grp_Conv2_layer_fu_382_ap_start <= grp_Conv2_layer_fu_382_ap_start_reg;
    grp_FC2_layer_fu_550_ap_start <= grp_FC2_layer_fu_550_ap_start_reg;
    grp_Flatten_layer_fu_601_ap_start <= grp_Flatten_layer_fu_601_ap_start_reg;
    grp_Init_fu_579_ap_start <= grp_Init_fu_579_ap_start_reg;
    grp_MaxPooling1_layer_fu_563_ap_start <= grp_MaxPooling1_layer_fu_563_ap_start_reg;
    grp_MaxPooling2_layer_fu_571_ap_start <= grp_MaxPooling2_layer_fu_571_ap_start_reg;

    grp_fu_609_p1_assign_proc : process(fc1_bias_q0, ap_CS_fsm_state18, ap_CS_fsm_state22, tmp_45_i_reg_854)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_609_p1 <= fc1_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_609_p1 <= tmp_45_i_reg_854;
        else 
            grp_fu_609_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_725_p2 <= std_logic_vector(unsigned(i_i_reg_349) + unsigned(ap_const_lv6_1));
    k_fu_746_p2 <= std_logic_vector(unsigned(k_i_reg_360) + unsigned(ap_const_lv7_1));
    next_mul_fu_757_p2 <= std_logic_vector(unsigned(phi_mul_reg_371) + unsigned(ap_const_lv12_32));
    p_shl1_cast_fu_670_p3 <= (tmp_6_fu_666_p1 & ap_const_lv2_0);
    p_shl_cast_fu_658_p3 <= (tmp_3_fu_654_p1 & ap_const_lv5_0);

    pool1_output_address0_assign_proc : process(grp_Conv2_layer_fu_382_pool1_output_address0, grp_MaxPooling1_layer_fu_563_pool1_output_address0, grp_Init_fu_579_pool1_output_address0, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool1_output_address0 <= grp_Init_fu_579_pool1_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pool1_output_address0 <= grp_MaxPooling1_layer_fu_563_pool1_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pool1_output_address0 <= grp_Conv2_layer_fu_382_pool1_output_address0;
        else 
            pool1_output_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pool1_output_ce0_assign_proc : process(grp_Conv2_layer_fu_382_pool1_output_ce0, grp_MaxPooling1_layer_fu_563_pool1_output_ce0, grp_Init_fu_579_pool1_output_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool1_output_ce0 <= grp_Init_fu_579_pool1_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pool1_output_ce0 <= grp_MaxPooling1_layer_fu_563_pool1_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pool1_output_ce0 <= grp_Conv2_layer_fu_382_pool1_output_ce0;
        else 
            pool1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool1_output_ce1_assign_proc : process(grp_Conv2_layer_fu_382_pool1_output_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pool1_output_ce1 <= grp_Conv2_layer_fu_382_pool1_output_ce1;
        else 
            pool1_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pool1_output_d0_assign_proc : process(grp_MaxPooling1_layer_fu_563_pool1_output_d0, grp_Init_fu_579_pool1_output_d0, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool1_output_d0 <= grp_Init_fu_579_pool1_output_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pool1_output_d0 <= grp_MaxPooling1_layer_fu_563_pool1_output_d0;
        else 
            pool1_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool1_output_we0_assign_proc : process(grp_MaxPooling1_layer_fu_563_pool1_output_we0, grp_Init_fu_579_pool1_output_we0, ap_CS_fsm_state7, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool1_output_we0 <= grp_Init_fu_579_pool1_output_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pool1_output_we0 <= grp_MaxPooling1_layer_fu_563_pool1_output_we0;
        else 
            pool1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2_output_address0_assign_proc : process(grp_MaxPooling2_layer_fu_571_pool2_output_address0, grp_Init_fu_579_pool2_output_address0, grp_Flatten_layer_fu_601_pool2_output_address0, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pool2_output_address0 <= grp_Flatten_layer_fu_601_pool2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool2_output_address0 <= grp_Init_fu_579_pool2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pool2_output_address0 <= grp_MaxPooling2_layer_fu_571_pool2_output_address0;
        else 
            pool2_output_address0 <= "XXXXXXX";
        end if; 
    end process;


    pool2_output_ce0_assign_proc : process(grp_MaxPooling2_layer_fu_571_pool2_output_ce0, grp_Init_fu_579_pool2_output_ce0, grp_Flatten_layer_fu_601_pool2_output_ce0, ap_CS_fsm_state13, ap_CS_fsm_state11, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pool2_output_ce0 <= grp_Flatten_layer_fu_601_pool2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool2_output_ce0 <= grp_Init_fu_579_pool2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pool2_output_ce0 <= grp_MaxPooling2_layer_fu_571_pool2_output_ce0;
        else 
            pool2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2_output_ce1_assign_proc : process(grp_Flatten_layer_fu_601_pool2_output_ce1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pool2_output_ce1 <= grp_Flatten_layer_fu_601_pool2_output_ce1;
        else 
            pool2_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pool2_output_d0_assign_proc : process(grp_MaxPooling2_layer_fu_571_pool2_output_d0, grp_Init_fu_579_pool2_output_d0, ap_CS_fsm_state11, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool2_output_d0 <= grp_Init_fu_579_pool2_output_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pool2_output_d0 <= grp_MaxPooling2_layer_fu_571_pool2_output_d0;
        else 
            pool2_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pool2_output_we0_assign_proc : process(grp_MaxPooling2_layer_fu_571_pool2_output_we0, grp_Init_fu_579_pool2_output_we0, ap_CS_fsm_state11, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool2_output_we0 <= grp_Init_fu_579_pool2_output_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pool2_output_we0 <= grp_MaxPooling2_layer_fu_571_pool2_output_we0;
        else 
            pool2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    predict <= grp_FC2_layer_fu_550_ap_return;

    predict_ap_vld_assign_proc : process(tmp_reg_781, ap_CS_fsm_state27, ap_block_state27_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_reg_781 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state27_on_subcall_done))) then 
            predict_ap_vld <= ap_const_logic_1;
        else 
            predict_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_763_p2),64));
    tmp_1_fu_644_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(column));
    tmp_2_fu_650_p1 <= column(11 - 1 downto 0);
    tmp_3_fu_654_p1 <= row(6 - 1 downto 0);
    tmp_43_i_fu_773_p3 <= 
        tmp_i_3_reg_864 when (tmp_42_i_fu_620_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_44_i_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i_reg_360),64));
    tmp_4_fu_695_p2 <= "1" when (tmp_1_fu_644_p2 = ap_const_lv32_1C) else "0";
    tmp_5_fu_701_p2 <= std_logic_vector(unsigned(row) + unsigned(ap_const_lv32_1));
    tmp_6_fu_666_p1 <= row(9 - 1 downto 0);
    tmp_7_fu_678_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_658_p3) - unsigned(p_shl1_cast_fu_670_p3));
        tmp_8_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_684_p2),64));

    tmp_8_fu_684_p2 <= std_logic_vector(unsigned(tmp_2_fu_650_p1) + unsigned(tmp_7_fu_678_p2));
    tmp_fu_634_p2 <= "1" when (row = ap_const_lv32_1C) else "0";
    tmp_i_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_349),12));
    tmp_i_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_349),64));
    tmp_s_fu_763_p2 <= std_logic_vector(unsigned(tmp_i_cast_reg_806) + unsigned(phi_mul_reg_371));
end behav;
