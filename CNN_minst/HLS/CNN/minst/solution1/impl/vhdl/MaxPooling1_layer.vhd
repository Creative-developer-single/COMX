-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MaxPooling1_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv1_output_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv1_output_ce0 : OUT STD_LOGIC;
    conv1_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pool1_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    pool1_output_ce0 : OUT STD_LOGIC;
    pool1_output_we0 : OUT STD_LOGIC;
    pool1_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MaxPooling1_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal channels_2_fu_184_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal channels_2_reg_458 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_23_cast_fu_220_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_cast_reg_463 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_cast_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_cast_reg_468 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_1_1_fu_264_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_1_1_reg_476 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_270_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_481 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_307_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_reg_486 : STD_LOGIC_VECTOR (9 downto 0);
    signal column_1_1_fu_319_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal column_1_1_reg_494 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_11_fu_325_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_reg_499 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_343_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_507 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_27_fu_383_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_reg_512 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_422_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_520 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal maxn_2_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal channels_reg_90 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_1_reg_101 : STD_LOGIC_VECTOR (3 downto 0);
    signal column_1_reg_112 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_124 : STD_LOGIC_VECTOR (1 downto 0);
    signal maxn_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_147 : STD_LOGIC_VECTOR (1 downto 0);
    signal maxn_1_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_cast_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_cast_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_170_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_190_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_fu_202_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_198_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_224_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_236_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_232_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_cast_fu_244_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_22_fu_248_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_cast_fu_278_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_287_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_cast_fu_291_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl5_cast_fu_299_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast2_fu_333_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_fu_349_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_cast_fu_354_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_363_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl6_cast_fu_367_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl7_cast_fu_375_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_cast_fu_398_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_fu_402_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_cast1_fu_412_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_cast_fu_433_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_28_fu_437_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_170_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component run_fcmp_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    run_fcmp_32ns_32ndEe_U45 : component run_fcmp_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_170_p0,
        din1 => grp_fu_170_p1,
        opcode => grp_fu_170_opcode,
        dout => grp_fu_170_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    channels_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                channels_reg_90 <= channels_2_reg_458;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                channels_reg_90 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    column_1_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                column_1_reg_112 <= ap_const_lv4_0;
            elsif (((exitcond1_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                column_1_reg_112 <= column_1_1_reg_494;
            end if; 
        end if;
    end process;

    i_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_416_p2 = ap_const_lv1_1))) then 
                i_reg_124 <= i_2_reg_507;
            elsif (((exitcond2_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_124 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_147 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_147 <= j_2_reg_520;
            end if; 
        end if;
    end process;

    maxn_1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                maxn_1_reg_158 <= maxn_reg_135;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                maxn_1_reg_158 <= maxn_2_fu_447_p3;
            end if; 
        end if;
    end process;

    maxn_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_416_p2 = ap_const_lv1_1))) then 
                maxn_reg_135 <= maxn_1_reg_158;
            elsif (((exitcond2_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                maxn_reg_135 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_1_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_1_reg_101 <= row_1_1_reg_476;
            elsif (((exitcond4_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_1_reg_101 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                channels_2_reg_458 <= channels_2_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                column_1_1_reg_494 <= column_1_1_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_2_reg_507 <= i_2_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_520 <= j_2_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                row_1_1_reg_476 <= row_1_1_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_11_reg_499(4 downto 1) <= tmp_11_fu_325_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_178_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_23_cast_reg_463(8 downto 3) <= tmp_23_cast_fu_220_p1(8 downto 3);
                    tmp_26_cast_reg_468(7 downto 2) <= tmp_26_cast_fu_254_p1(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_24_reg_486(9 downto 2) <= tmp_24_fu_307_p2(9 downto 2);
                    tmp_s_reg_481(4 downto 1) <= tmp_s_fu_270_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_27_reg_512(11 downto 3) <= tmp_27_fu_383_p2(11 downto 3);
            end if;
        end if;
    end process;
    tmp_23_cast_reg_463(2 downto 0) <= "000";
    tmp_26_cast_reg_468(1 downto 0) <= "00";
    tmp_s_reg_481(0) <= '0';
    tmp_24_reg_486(1 downto 0) <= "00";
    tmp_11_reg_499(0) <= '0';
    tmp_27_reg_512(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_178_p2, ap_CS_fsm_state3, exitcond3_fu_258_p2, ap_CS_fsm_state4, exitcond2_fu_313_p2, ap_CS_fsm_state5, exitcond1_fu_337_p2, ap_CS_fsm_state6, exitcond_fu_416_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_416_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_178_p2)
    begin
        if ((((exitcond4_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_178_p2)
    begin
        if (((exitcond4_fu_178_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    channels_2_fu_184_p2 <= std_logic_vector(unsigned(channels_reg_90) + unsigned(ap_const_lv2_1));
    column_1_1_fu_319_p2 <= std_logic_vector(unsigned(column_1_reg_112) + unsigned(ap_const_lv4_1));
    conv1_output_address0 <= tmp_36_cast_fu_442_p1(11 - 1 downto 0);

    conv1_output_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv1_output_ce0 <= ap_const_logic_1;
        else 
            conv1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_337_p2 <= "1" when (i_reg_124 = ap_const_lv2_2) else "0";
    exitcond2_fu_313_p2 <= "1" when (column_1_reg_112 = ap_const_lv4_C) else "0";
    exitcond3_fu_258_p2 <= "1" when (row_1_reg_101 = ap_const_lv4_C) else "0";
    exitcond4_fu_178_p2 <= "1" when (channels_reg_90 = ap_const_lv2_3) else "0";
    exitcond_fu_416_p2 <= "1" when (j_reg_147 = ap_const_lv2_2) else "0";

    grp_fu_170_opcode_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_337_p2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_170_opcode <= ap_const_lv5_4;
        elsif (((exitcond1_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_170_opcode <= ap_const_lv5_2;
        else 
            grp_fu_170_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_170_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, maxn_reg_135, maxn_1_reg_158)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_170_p0 <= maxn_1_reg_158;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_170_p0 <= maxn_reg_135;
        else 
            grp_fu_170_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_170_p1_assign_proc : process(conv1_output_q0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_170_p1 <= conv1_output_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_170_p1 <= ap_const_lv32_0;
        else 
            grp_fu_170_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_fu_343_p2 <= std_logic_vector(unsigned(i_reg_124) + unsigned(ap_const_lv2_1));
    i_cast2_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_124),5));
    j_2_fu_422_p2 <= std_logic_vector(unsigned(j_reg_147) + unsigned(ap_const_lv2_1));
    j_cast1_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_147),5));
    maxn_2_fu_447_p3 <= 
        conv1_output_q0 when (grp_fu_170_p2(0) = '1') else 
        maxn_1_reg_158;
    p_shl1_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_236_p3),7));
    p_shl2_cast_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_190_p3),8));
    p_shl3_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_202_p3),8));
    p_shl4_cast_fu_291_p3 <= (tmp_9_fu_287_p1 & ap_const_lv4_0);
    p_shl5_cast_fu_299_p3 <= (tmp_23_fu_282_p2 & ap_const_lv2_0);
    p_shl6_cast_fu_367_p3 <= (tmp_10_fu_363_p1 & ap_const_lv5_0);
    p_shl7_cast_fu_375_p3 <= (tmp_26_fu_358_p2 & ap_const_lv3_0);
    p_shl_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_224_p3),7));
    pool1_output_address0 <= tmp_31_cast_fu_407_p1(9 - 1 downto 0);

    pool1_output_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pool1_output_ce0 <= ap_const_logic_1;
        else 
            pool1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pool1_output_d0 <= 
        maxn_reg_135 when (grp_fu_170_p2(0) = '1') else 
        ap_const_lv32_0;

    pool1_output_we0_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_337_p2)
    begin
        if (((exitcond1_fu_337_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pool1_output_we0 <= ap_const_logic_1;
        else 
            pool1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_1_1_fu_264_p2 <= std_logic_vector(unsigned(row_1_reg_101) + unsigned(ap_const_lv4_1));
    tmp_10_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_1_reg_101),8));
    tmp_10_fu_363_p1 <= tmp_26_fu_358_p2(7 - 1 downto 0);
    tmp_11_fu_325_p3 <= (column_1_reg_112 & ap_const_lv1_0);
    tmp_14_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_1_reg_112),10));
    tmp_14_fu_202_p3 <= (channels_reg_90 & ap_const_lv3_0);
    tmp_15_fu_349_p2 <= std_logic_vector(unsigned(tmp_s_reg_481) + unsigned(i_cast2_fu_333_p1));
    tmp_16_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_349_p2),9));
    tmp_16_fu_214_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_198_p1) - unsigned(p_shl3_cast_fu_210_p1));
    tmp_18_fu_428_p2 <= std_logic_vector(unsigned(j_cast1_fu_412_p1) + unsigned(tmp_11_reg_499));
    tmp_19_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_428_p2),12));
    tmp_19_fu_224_p3 <= (channels_reg_90 & ap_const_lv4_0);
    tmp_21_fu_236_p3 <= (channels_reg_90 & ap_const_lv2_0);
    tmp_22_fu_248_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_232_p1) - unsigned(p_shl1_cast_fu_244_p1));
        tmp_23_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_214_p2),9));

    tmp_23_fu_282_p2 <= std_logic_vector(signed(tmp_26_cast_reg_468) + signed(tmp_10_cast_fu_278_p1));
    tmp_24_fu_307_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_291_p3) - unsigned(p_shl5_cast_fu_299_p3));
    tmp_25_fu_402_p2 <= std_logic_vector(unsigned(tmp_24_reg_486) + unsigned(tmp_14_cast_fu_398_p1));
        tmp_26_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_248_p2),8));

    tmp_26_fu_358_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_354_p1) + unsigned(tmp_23_cast_reg_463));
    tmp_27_fu_383_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_367_p3) - unsigned(p_shl7_cast_fu_375_p3));
    tmp_28_fu_437_p2 <= std_logic_vector(unsigned(tmp_27_reg_512) + unsigned(tmp_19_cast_fu_433_p1));
    tmp_31_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_402_p2),64));
    tmp_36_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_437_p2),64));
    tmp_9_fu_287_p1 <= tmp_23_fu_282_p2(6 - 1 downto 0);
    tmp_fu_190_p3 <= (channels_reg_90 & ap_const_lv5_0);
    tmp_s_fu_270_p3 <= (row_1_reg_101 & ap_const_lv1_0);
end behav;
