-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MaxPooling2_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2_output_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv2_output_ce0 : OUT STD_LOGIC;
    conv2_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pool2_output_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    pool2_output_ce0 : OUT STD_LOGIC;
    pool2_output_we0 : OUT STD_LOGIC;
    pool2_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of MaxPooling2_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal channels_1_fu_167_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal channels_1_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_12_cast_fu_181_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_cast_reg_333 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_1_fu_191_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_1_reg_341 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_7_fu_197_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_reg_346 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_cast_fu_212_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_reg_351 : STD_LOGIC_VECTOR (7 downto 0);
    signal column_1_fu_226_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal column_1_reg_359 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_8_fu_232_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_reg_364 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_248_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_372 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_4_fu_254_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_reg_377 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_292_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_385 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal maxn_2_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal channels_reg_72 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_1_1_reg_84 : STD_LOGIC_VECTOR (2 downto 0);
    signal column_1_1_reg_95 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_107 : STD_LOGIC_VECTOR (1 downto 0);
    signal maxn_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_130 : STD_LOGIC_VECTOR (1 downto 0);
    signal maxn_1_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_153_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_153_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_173_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_fu_203_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_207_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast_fu_238_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_cast_fu_268_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast_fu_282_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_298_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_303_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_153_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component run_fcmp_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    run_fcmp_32ns_32ndEe_U131 : component run_fcmp_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_153_p0,
        din1 => grp_fu_153_p1,
        opcode => grp_fu_153_opcode,
        dout => grp_fu_153_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    channels_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                channels_reg_72 <= channels_1_reg_328;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                channels_reg_72 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    column_1_1_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                column_1_1_reg_95 <= ap_const_lv3_0;
            elsif (((exitcond1_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                column_1_1_reg_95 <= column_1_reg_359;
            end if; 
        end if;
    end process;

    i_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_286_p2 = ap_const_lv1_1))) then 
                i_reg_107 <= i_1_reg_372;
            elsif (((exitcond2_fu_220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_107 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_130 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_130 <= j_1_reg_385;
            end if; 
        end if;
    end process;

    maxn_1_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                maxn_1_reg_141 <= maxn_reg_118;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                maxn_1_reg_141 <= maxn_2_fu_317_p3;
            end if; 
        end if;
    end process;

    maxn_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_286_p2 = ap_const_lv1_1))) then 
                maxn_reg_118 <= maxn_1_reg_141;
            elsif (((exitcond2_fu_220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                maxn_reg_118 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    row_1_1_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                row_1_1_reg_84 <= row_1_reg_341;
            elsif (((exitcond4_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_1_1_reg_84 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                channels_1_reg_328 <= channels_1_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                column_1_reg_359 <= column_1_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_1_reg_372 <= i_1_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_385 <= j_1_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                row_1_reg_341 <= row_1_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_12_cast_reg_333(4 downto 2) <= tmp_12_cast_fu_181_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_16_cast_reg_351(7 downto 2) <= tmp_16_cast_fu_212_p3(7 downto 2);
                    tmp_7_reg_346(2 downto 1) <= tmp_7_fu_197_p2(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_4_reg_377 <= tmp_4_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_8_reg_364(2 downto 1) <= tmp_8_fu_232_p2(2 downto 1);
            end if;
        end if;
    end process;
    tmp_12_cast_reg_333(1 downto 0) <= "00";
    tmp_12_cast_reg_333(5) <= '0';
    tmp_7_reg_346(0) <= '0';
    tmp_16_cast_reg_351(1 downto 0) <= "00";
    tmp_8_reg_364(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_161_p2, ap_CS_fsm_state3, exitcond3_fu_185_p2, ap_CS_fsm_state4, exitcond2_fu_220_p2, ap_CS_fsm_state5, exitcond1_fu_242_p2, ap_CS_fsm_state6, exitcond_fu_286_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_185_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_220_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_286_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_161_p2)
    begin
        if ((((exitcond4_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_161_p2)
    begin
        if (((exitcond4_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    channels_1_fu_167_p2 <= std_logic_vector(unsigned(channels_reg_72) + unsigned(ap_const_lv3_1));
    column_1_fu_226_p2 <= std_logic_vector(unsigned(column_1_1_reg_95) + unsigned(ap_const_lv3_1));
    conv2_output_address0 <= tmp_11_fu_312_p1(9 - 1 downto 0);

    conv2_output_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv2_output_ce0 <= ap_const_logic_1;
        else 
            conv2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_242_p2 <= "1" when (i_reg_107 = ap_const_lv2_2) else "0";
    exitcond2_fu_220_p2 <= "1" when (column_1_1_reg_95 = ap_const_lv3_4) else "0";
    exitcond3_fu_185_p2 <= "1" when (row_1_1_reg_84 = ap_const_lv3_4) else "0";
    exitcond4_fu_161_p2 <= "1" when (channels_reg_72 = ap_const_lv3_5) else "0";
    exitcond_fu_286_p2 <= "1" when (j_reg_130 = ap_const_lv2_2) else "0";

    grp_fu_153_opcode_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_242_p2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_153_opcode <= ap_const_lv5_4;
        elsif (((exitcond1_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_153_opcode <= ap_const_lv5_2;
        else 
            grp_fu_153_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_153_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, maxn_reg_118, maxn_1_reg_141)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_153_p0 <= maxn_1_reg_141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_153_p0 <= maxn_reg_118;
        else 
            grp_fu_153_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_153_p1_assign_proc : process(conv2_output_q0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_153_p1 <= conv2_output_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_153_p1 <= ap_const_lv32_0;
        else 
            grp_fu_153_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_1_fu_248_p2 <= std_logic_vector(unsigned(i_reg_107) + unsigned(ap_const_lv2_1));
    i_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_107),3));
    j_1_fu_292_p2 <= std_logic_vector(unsigned(j_reg_130) + unsigned(ap_const_lv2_1));
    j_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_130),3));
    maxn_2_fu_317_p3 <= 
        conv2_output_q0 when (grp_fu_153_p2(0) = '1') else 
        maxn_1_reg_141;
    pool2_output_address0 <= tmp_18_cast_fu_277_p1(7 - 1 downto 0);

    pool2_output_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            pool2_output_ce0 <= ap_const_logic_1;
        else 
            pool2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pool2_output_d0 <= 
        maxn_reg_118 when (grp_fu_153_p2(0) = '1') else 
        ap_const_lv32_0;

    pool2_output_we0_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_242_p2)
    begin
        if (((exitcond1_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pool2_output_we0 <= ap_const_logic_1;
        else 
            pool2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    row_1_fu_191_p2 <= std_logic_vector(unsigned(row_1_1_reg_84) + unsigned(ap_const_lv3_1));
    tmp_10_fu_303_p4 <= ((channels_reg_72 & tmp_4_reg_377) & tmp_6_fu_298_p2);
    tmp_11_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_303_p4),64));
    tmp_12_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_173_p3),6));
    tmp_16_cast_fu_212_p3 <= (tmp_s_fu_207_p2 & ap_const_lv2_0);
    tmp_18_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_272_p2),64));
    tmp_3_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_1_1_reg_95),8));
    tmp_3_fu_272_p2 <= std_logic_vector(unsigned(tmp_16_cast_reg_351) + unsigned(tmp_3_cast_fu_268_p1));
    tmp_4_fu_254_p2 <= std_logic_vector(unsigned(tmp_7_reg_346) + unsigned(i_cast_fu_238_p1));
    tmp_6_fu_298_p2 <= std_logic_vector(unsigned(tmp_8_reg_364) + unsigned(j_cast_fu_282_p1));
    tmp_7_fu_197_p2 <= std_logic_vector(shift_left(unsigned(row_1_1_reg_84),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    tmp_8_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_1_1_reg_84),6));
    tmp_8_fu_232_p2 <= std_logic_vector(shift_left(unsigned(column_1_1_reg_95),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    tmp_fu_173_p3 <= (channels_reg_72 & ap_const_lv2_0);
    tmp_s_fu_207_p2 <= std_logic_vector(unsigned(tmp_12_cast_reg_333) + unsigned(tmp_8_cast_fu_203_p1));
end behav;
