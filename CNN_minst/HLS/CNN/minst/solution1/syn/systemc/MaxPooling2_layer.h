// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _MaxPooling2_layer_HH_
#define _MaxPooling2_layer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "run_fcmp_32ns_32ndEe.h"

namespace ap_rtl {

struct MaxPooling2_layer : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > conv2_output_address0;
    sc_out< sc_logic > conv2_output_ce0;
    sc_in< sc_lv<32> > conv2_output_q0;
    sc_out< sc_lv<7> > pool2_output_address0;
    sc_out< sc_logic > pool2_output_ce0;
    sc_out< sc_logic > pool2_output_we0;
    sc_out< sc_lv<32> > pool2_output_d0;


    // Module declarations
    MaxPooling2_layer(sc_module_name name);
    SC_HAS_PROCESS(MaxPooling2_layer);

    ~MaxPooling2_layer();

    sc_trace_file* mVcdFile;

    run_fcmp_32ns_32ndEe<1,1,32,32,1>* run_fcmp_32ns_32ndEe_U131;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > channels_1_fu_167_p2;
    sc_signal< sc_lv<3> > channels_1_reg_328;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > tmp_12_cast_fu_181_p1;
    sc_signal< sc_lv<6> > tmp_12_cast_reg_333;
    sc_signal< sc_lv<1> > exitcond4_fu_161_p2;
    sc_signal< sc_lv<3> > row_1_fu_191_p2;
    sc_signal< sc_lv<3> > row_1_reg_341;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > tmp_7_fu_197_p2;
    sc_signal< sc_lv<3> > tmp_7_reg_346;
    sc_signal< sc_lv<1> > exitcond3_fu_185_p2;
    sc_signal< sc_lv<8> > tmp_16_cast_fu_212_p3;
    sc_signal< sc_lv<8> > tmp_16_cast_reg_351;
    sc_signal< sc_lv<3> > column_1_fu_226_p2;
    sc_signal< sc_lv<3> > column_1_reg_359;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > tmp_8_fu_232_p2;
    sc_signal< sc_lv<3> > tmp_8_reg_364;
    sc_signal< sc_lv<1> > exitcond2_fu_220_p2;
    sc_signal< sc_lv<2> > i_1_fu_248_p2;
    sc_signal< sc_lv<2> > i_1_reg_372;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > tmp_4_fu_254_p2;
    sc_signal< sc_lv<3> > tmp_4_reg_377;
    sc_signal< sc_lv<1> > exitcond1_fu_242_p2;
    sc_signal< sc_lv<2> > j_1_fu_292_p2;
    sc_signal< sc_lv<2> > j_1_reg_385;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > exitcond_fu_286_p2;
    sc_signal< sc_lv<32> > maxn_2_fu_317_p3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<3> > channels_reg_72;
    sc_signal< sc_lv<3> > row_1_1_reg_84;
    sc_signal< sc_lv<3> > column_1_1_reg_95;
    sc_signal< sc_lv<2> > i_reg_107;
    sc_signal< sc_lv<32> > maxn_reg_118;
    sc_signal< sc_lv<2> > j_reg_130;
    sc_signal< sc_lv<32> > maxn_1_reg_141;
    sc_signal< sc_lv<64> > tmp_18_cast_fu_277_p1;
    sc_signal< sc_lv<64> > tmp_11_fu_312_p1;
    sc_signal< sc_lv<32> > grp_fu_153_p0;
    sc_signal< sc_lv<32> > grp_fu_153_p1;
    sc_signal< sc_lv<5> > tmp_fu_173_p3;
    sc_signal< sc_lv<6> > tmp_8_cast_fu_203_p1;
    sc_signal< sc_lv<6> > tmp_s_fu_207_p2;
    sc_signal< sc_lv<3> > i_cast_fu_238_p1;
    sc_signal< sc_lv<1> > grp_fu_153_p2;
    sc_signal< sc_lv<8> > tmp_3_cast_fu_268_p1;
    sc_signal< sc_lv<8> > tmp_3_fu_272_p2;
    sc_signal< sc_lv<3> > j_cast_fu_282_p1;
    sc_signal< sc_lv<3> > tmp_6_fu_298_p2;
    sc_signal< sc_lv<9> > tmp_10_fu_303_p4;
    sc_signal< sc_lv<5> > grp_fu_153_opcode;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<5> ap_const_lv5_2;
    static const sc_lv<5> ap_const_lv5_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_channels_1_fu_167_p2();
    void thread_column_1_fu_226_p2();
    void thread_conv2_output_address0();
    void thread_conv2_output_ce0();
    void thread_exitcond1_fu_242_p2();
    void thread_exitcond2_fu_220_p2();
    void thread_exitcond3_fu_185_p2();
    void thread_exitcond4_fu_161_p2();
    void thread_exitcond_fu_286_p2();
    void thread_grp_fu_153_opcode();
    void thread_grp_fu_153_p0();
    void thread_grp_fu_153_p1();
    void thread_i_1_fu_248_p2();
    void thread_i_cast_fu_238_p1();
    void thread_j_1_fu_292_p2();
    void thread_j_cast_fu_282_p1();
    void thread_maxn_2_fu_317_p3();
    void thread_pool2_output_address0();
    void thread_pool2_output_ce0();
    void thread_pool2_output_d0();
    void thread_pool2_output_we0();
    void thread_row_1_fu_191_p2();
    void thread_tmp_10_fu_303_p4();
    void thread_tmp_11_fu_312_p1();
    void thread_tmp_12_cast_fu_181_p1();
    void thread_tmp_16_cast_fu_212_p3();
    void thread_tmp_18_cast_fu_277_p1();
    void thread_tmp_3_cast_fu_268_p1();
    void thread_tmp_3_fu_272_p2();
    void thread_tmp_4_fu_254_p2();
    void thread_tmp_6_fu_298_p2();
    void thread_tmp_7_fu_197_p2();
    void thread_tmp_8_cast_fu_203_p1();
    void thread_tmp_8_fu_232_p2();
    void thread_tmp_fu_173_p3();
    void thread_tmp_s_fu_207_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
