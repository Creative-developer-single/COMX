// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "FC2_layer.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic FC2_layer::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic FC2_layer::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<15> FC2_layer::ap_ST_fsm_state1 = "1";
const sc_lv<15> FC2_layer::ap_ST_fsm_state2 = "10";
const sc_lv<15> FC2_layer::ap_ST_fsm_state3 = "100";
const sc_lv<15> FC2_layer::ap_ST_fsm_state4 = "1000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state5 = "10000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state6 = "100000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state7 = "1000000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state8 = "10000000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state9 = "100000000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state10 = "1000000000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state11 = "10000000000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state12 = "100000000000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<15> FC2_layer::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<32> FC2_layer::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> FC2_layer::ap_const_lv32_5 = "101";
const sc_lv<32> FC2_layer::ap_const_lv32_9 = "1001";
const sc_lv<32> FC2_layer::ap_const_lv32_1 = "1";
const sc_lv<1> FC2_layer::ap_const_lv1_0 = "0";
const sc_lv<32> FC2_layer::ap_const_lv32_2 = "10";
const sc_lv<1> FC2_layer::ap_const_lv1_1 = "1";
const sc_lv<32> FC2_layer::ap_const_lv32_3 = "11";
const sc_lv<32> FC2_layer::ap_const_lv32_4 = "100";
const sc_lv<32> FC2_layer::ap_const_lv32_D = "1101";
const sc_lv<32> FC2_layer::ap_const_lv32_E = "1110";
const sc_lv<4> FC2_layer::ap_const_lv4_0 = "0000";
const sc_lv<32> FC2_layer::ap_const_lv32_C = "1100";
const sc_lv<6> FC2_layer::ap_const_lv6_0 = "000000";
const sc_lv<32> FC2_layer::ap_const_lv32_8 = "1000";
const sc_lv<4> FC2_layer::ap_const_lv4_A = "1010";
const sc_lv<4> FC2_layer::ap_const_lv4_1 = "1";
const sc_lv<6> FC2_layer::ap_const_lv6_32 = "110010";
const sc_lv<6> FC2_layer::ap_const_lv6_1 = "1";
const sc_lv<3> FC2_layer::ap_const_lv3_0 = "000";
const sc_lv<5> FC2_layer::ap_const_lv5_4 = "100";
const bool FC2_layer::ap_const_boolean_1 = true;

FC2_layer::FC2_layer(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fc2_wei_U = new FC2_layer_fc2_wei("fc2_wei_U");
    fc2_wei_U->clk(ap_clk);
    fc2_wei_U->reset(ap_rst);
    fc2_wei_U->address0(fc2_wei_address0);
    fc2_wei_U->ce0(fc2_wei_ce0);
    fc2_wei_U->q0(fc2_wei_q0);
    fc2_bias_U = new FC2_layer_fc2_bias("fc2_bias_U");
    fc2_bias_U->clk(ap_clk);
    fc2_bias_U->reset(ap_rst);
    fc2_bias_U->address0(fc2_bias_address0);
    fc2_bias_U->ce0(fc2_bias_ce0);
    fc2_bias_U->q0(fc2_bias_q0);
    run_fadd_32ns_32nbkb_U136 = new run_fadd_32ns_32nbkb<1,4,32,32,32>("run_fadd_32ns_32nbkb_U136");
    run_fadd_32ns_32nbkb_U136->clk(ap_clk);
    run_fadd_32ns_32nbkb_U136->reset(ap_rst);
    run_fadd_32ns_32nbkb_U136->din0(fc2_output_q0);
    run_fadd_32ns_32nbkb_U136->din1(grp_fu_166_p1);
    run_fadd_32ns_32nbkb_U136->ce(ap_var_for_const0);
    run_fadd_32ns_32nbkb_U136->dout(grp_fu_166_p2);
    run_fmul_32ns_32ncud_U137 = new run_fmul_32ns_32ncud<1,1,32,32,32>("run_fmul_32ns_32ncud_U137");
    run_fmul_32ns_32ncud_U137->din0(fc1_output_load_reg_348);
    run_fmul_32ns_32ncud_U137->din1(fc2_wei_load_reg_353);
    run_fmul_32ns_32ncud_U137->dout(tmp_35_fu_173_p2);
    run_fcmp_32ns_32ndEe_U138 = new run_fcmp_32ns_32ndEe<1,1,32,32,1>("run_fcmp_32ns_32ndEe_U138");
    run_fcmp_32ns_32ndEe_U138->din0(maxn_reg_143);
    run_fcmp_32ns_32ndEe_U138->din1(fc2_output_q0);
    run_fcmp_32ns_32ndEe_U138->opcode(ap_var_for_const1);
    run_fcmp_32ns_32ndEe_U138->dout(tmp_33_fu_177_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond_fu_270_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond_fu_270_p2 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond_fu_270_p2 );
    sensitive << ( predict_write_assign_reg_131 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_exitcond2_fu_209_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_reg_120 );

    SC_METHOD(thread_exitcond3_fu_188_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_109 );

    SC_METHOD(thread_exitcond_fu_270_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( index_reg_155 );

    SC_METHOD(thread_fc1_output_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_34_fu_221_p1 );

    SC_METHOD(thread_fc1_output_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_fc2_bias_address0);
    sensitive << ( tmp_reg_310 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_fc2_bias_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_fc2_output_address0);
    sensitive << ( fc2_output_addr_reg_320 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_32_fu_282_p1 );

    SC_METHOD(thread_fc2_output_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_fc2_output_d0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( grp_fu_166_p2 );

    SC_METHOD(thread_fc2_output_we0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_fc2_wei_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_102_cast_fu_261_p1 );

    SC_METHOD(thread_fc2_wei_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_166_p1);
    sensitive << ( fc2_bias_q0 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_35_reg_358 );

    SC_METHOD(thread_i_12_fu_194_p2);
    sensitive << ( i_reg_109 );

    SC_METHOD(thread_i_1_fu_276_p2);
    sensitive << ( index_reg_155 );

    SC_METHOD(thread_index_1_fu_287_p3);
    sensitive << ( index_cast1_reg_368 );
    sensitive << ( predict_write_assign_reg_131 );
    sensitive << ( tmp_33_fu_177_p2 );

    SC_METHOD(thread_index_cast1_fu_266_p1);
    sensitive << ( index_reg_155 );

    SC_METHOD(thread_k_1_fu_215_p2);
    sensitive << ( k_reg_120 );

    SC_METHOD(thread_maxn_1_fu_294_p3);
    sensitive << ( fc2_output_q0 );
    sensitive << ( maxn_reg_143 );
    sensitive << ( tmp_33_fu_177_p2 );

    SC_METHOD(thread_p_shl1_cast_fu_246_p1);
    sensitive << ( tmp_83_fu_238_p3 );

    SC_METHOD(thread_p_shl_cast_fu_234_p1);
    sensitive << ( tmp_82_fu_226_p3 );

    SC_METHOD(thread_tmp_102_cast_fu_261_p1);
    sensitive << ( tmp_85_fu_256_p2 );

    SC_METHOD(thread_tmp_32_fu_282_p1);
    sensitive << ( index_reg_155 );

    SC_METHOD(thread_tmp_34_fu_221_p1);
    sensitive << ( k_reg_120 );

    SC_METHOD(thread_tmp_82_fu_226_p3);
    sensitive << ( k_reg_120 );

    SC_METHOD(thread_tmp_83_fu_238_p3);
    sensitive << ( k_reg_120 );

    SC_METHOD(thread_tmp_84_fu_250_p2);
    sensitive << ( p_shl1_cast_fu_246_p1 );
    sensitive << ( p_shl_cast_fu_234_p1 );

    SC_METHOD(thread_tmp_85_fu_256_p2);
    sensitive << ( tmp_cast_reg_315 );
    sensitive << ( tmp_84_fu_250_p2 );

    SC_METHOD(thread_tmp_cast_fu_205_p1);
    sensitive << ( i_reg_109 );

    SC_METHOD(thread_tmp_fu_200_p1);
    sensitive << ( i_reg_109 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_188_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_209_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond_fu_270_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "000000000000001";
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "FC2_layer_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, fc1_output_address0, "(port)fc1_output_address0");
    sc_trace(mVcdFile, fc1_output_ce0, "(port)fc1_output_ce0");
    sc_trace(mVcdFile, fc1_output_q0, "(port)fc1_output_q0");
    sc_trace(mVcdFile, fc2_output_address0, "(port)fc2_output_address0");
    sc_trace(mVcdFile, fc2_output_ce0, "(port)fc2_output_ce0");
    sc_trace(mVcdFile, fc2_output_we0, "(port)fc2_output_we0");
    sc_trace(mVcdFile, fc2_output_d0, "(port)fc2_output_d0");
    sc_trace(mVcdFile, fc2_output_q0, "(port)fc2_output_q0");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, fc2_wei_address0, "fc2_wei_address0");
    sc_trace(mVcdFile, fc2_wei_ce0, "fc2_wei_ce0");
    sc_trace(mVcdFile, fc2_wei_q0, "fc2_wei_q0");
    sc_trace(mVcdFile, fc2_bias_address0, "fc2_bias_address0");
    sc_trace(mVcdFile, fc2_bias_ce0, "fc2_bias_ce0");
    sc_trace(mVcdFile, fc2_bias_q0, "fc2_bias_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i_12_fu_194_p2, "i_12_fu_194_p2");
    sc_trace(mVcdFile, i_12_reg_305, "i_12_reg_305");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_200_p1, "tmp_fu_200_p1");
    sc_trace(mVcdFile, tmp_reg_310, "tmp_reg_310");
    sc_trace(mVcdFile, exitcond3_fu_188_p2, "exitcond3_fu_188_p2");
    sc_trace(mVcdFile, tmp_cast_fu_205_p1, "tmp_cast_fu_205_p1");
    sc_trace(mVcdFile, tmp_cast_reg_315, "tmp_cast_reg_315");
    sc_trace(mVcdFile, fc2_output_addr_reg_320, "fc2_output_addr_reg_320");
    sc_trace(mVcdFile, k_1_fu_215_p2, "k_1_fu_215_p2");
    sc_trace(mVcdFile, k_1_reg_328, "k_1_reg_328");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond2_fu_209_p2, "exitcond2_fu_209_p2");
    sc_trace(mVcdFile, fc1_output_load_reg_348, "fc1_output_load_reg_348");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, fc2_wei_load_reg_353, "fc2_wei_load_reg_353");
    sc_trace(mVcdFile, tmp_35_fu_173_p2, "tmp_35_fu_173_p2");
    sc_trace(mVcdFile, tmp_35_reg_358, "tmp_35_reg_358");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, index_cast1_fu_266_p1, "index_cast1_fu_266_p1");
    sc_trace(mVcdFile, index_cast1_reg_368, "index_cast1_reg_368");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, i_1_fu_276_p2, "i_1_fu_276_p2");
    sc_trace(mVcdFile, i_1_reg_376, "i_1_reg_376");
    sc_trace(mVcdFile, exitcond_fu_270_p2, "exitcond_fu_270_p2");
    sc_trace(mVcdFile, index_1_fu_287_p3, "index_1_fu_287_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, maxn_1_fu_294_p3, "maxn_1_fu_294_p3");
    sc_trace(mVcdFile, i_reg_109, "i_reg_109");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, k_reg_120, "k_reg_120");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, predict_write_assign_reg_131, "predict_write_assign_reg_131");
    sc_trace(mVcdFile, maxn_reg_143, "maxn_reg_143");
    sc_trace(mVcdFile, index_reg_155, "index_reg_155");
    sc_trace(mVcdFile, tmp_102_cast_fu_261_p1, "tmp_102_cast_fu_261_p1");
    sc_trace(mVcdFile, tmp_34_fu_221_p1, "tmp_34_fu_221_p1");
    sc_trace(mVcdFile, tmp_32_fu_282_p1, "tmp_32_fu_282_p1");
    sc_trace(mVcdFile, grp_fu_166_p2, "grp_fu_166_p2");
    sc_trace(mVcdFile, grp_fu_166_p1, "grp_fu_166_p1");
    sc_trace(mVcdFile, tmp_82_fu_226_p3, "tmp_82_fu_226_p3");
    sc_trace(mVcdFile, tmp_83_fu_238_p3, "tmp_83_fu_238_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_246_p1, "p_shl1_cast_fu_246_p1");
    sc_trace(mVcdFile, p_shl_cast_fu_234_p1, "p_shl_cast_fu_234_p1");
    sc_trace(mVcdFile, tmp_84_fu_250_p2, "tmp_84_fu_250_p2");
    sc_trace(mVcdFile, tmp_85_fu_256_p2, "tmp_85_fu_256_p2");
    sc_trace(mVcdFile, tmp_33_fu_177_p2, "tmp_33_fu_177_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

FC2_layer::~FC2_layer() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete fc2_wei_U;
    delete fc2_bias_U;
    delete run_fadd_32ns_32nbkb_U136;
    delete run_fmul_32ns_32ncud_U137;
    delete run_fcmp_32ns_32ndEe_U138;
}

void FC2_layer::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void FC2_layer::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_4;
}

void FC2_layer::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_270_p2.read()))) {
            ap_return_preg = predict_write_assign_reg_131.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_reg_109 = i_12_reg_305.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_109 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_188_p2.read(), ap_const_lv1_1))) {
        index_reg_155 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        index_reg_155 = i_1_reg_376.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        k_reg_120 = k_1_reg_328.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(exitcond3_fu_188_p2.read(), ap_const_lv1_0))) {
        k_reg_120 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_188_p2.read(), ap_const_lv1_1))) {
        maxn_reg_143 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        maxn_reg_143 = maxn_1_fu_294_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond3_fu_188_p2.read(), ap_const_lv1_1))) {
        predict_write_assign_reg_131 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        predict_write_assign_reg_131 = index_1_fu_287_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        fc1_output_load_reg_348 = fc1_output_q0.read();
        fc2_wei_load_reg_353 = fc2_wei_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_fu_188_p2.read(), ap_const_lv1_0))) {
        fc2_output_addr_reg_320 =  (sc_lv<4>) (tmp_fu_200_p1.read());
        tmp_cast_reg_315 = tmp_cast_fu_205_p1.read();
        tmp_reg_310 = tmp_fu_200_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_12_reg_305 = i_12_fu_194_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_1_reg_376 = i_1_fu_276_p2.read();
        index_cast1_reg_368 = index_cast1_fu_266_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_1_reg_328 = k_1_fu_215_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_35_reg_358 = tmp_35_fu_173_p2.read();
    }
}

void FC2_layer::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void FC2_layer::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void FC2_layer::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void FC2_layer::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void FC2_layer::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void FC2_layer::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void FC2_layer::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void FC2_layer::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void FC2_layer::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void FC2_layer::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void FC2_layer::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void FC2_layer::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_270_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void FC2_layer::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void FC2_layer::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_270_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void FC2_layer::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_270_p2.read()))) {
        ap_return = predict_write_assign_reg_131.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void FC2_layer::thread_exitcond2_fu_209_p2() {
    exitcond2_fu_209_p2 = (!k_reg_120.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_120.read() == ap_const_lv6_32);
}

void FC2_layer::thread_exitcond3_fu_188_p2() {
    exitcond3_fu_188_p2 = (!i_reg_109.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_109.read() == ap_const_lv4_A);
}

void FC2_layer::thread_exitcond_fu_270_p2() {
    exitcond_fu_270_p2 = (!index_reg_155.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(index_reg_155.read() == ap_const_lv4_A);
}

void FC2_layer::thread_fc1_output_address0() {
    fc1_output_address0 =  (sc_lv<6>) (tmp_34_fu_221_p1.read());
}

void FC2_layer::thread_fc1_output_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        fc1_output_ce0 = ap_const_logic_1;
    } else {
        fc1_output_ce0 = ap_const_logic_0;
    }
}

void FC2_layer::thread_fc2_bias_address0() {
    fc2_bias_address0 =  (sc_lv<4>) (tmp_reg_310.read());
}

void FC2_layer::thread_fc2_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        fc2_bias_ce0 = ap_const_logic_1;
    } else {
        fc2_bias_ce0 = ap_const_logic_0;
    }
}

void FC2_layer::thread_fc2_output_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        fc2_output_address0 =  (sc_lv<4>) (tmp_32_fu_282_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        fc2_output_address0 = fc2_output_addr_reg_320.read();
    } else {
        fc2_output_address0 = "XXXX";
    }
}

void FC2_layer::thread_fc2_output_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        fc2_output_ce0 = ap_const_logic_1;
    } else {
        fc2_output_ce0 = ap_const_logic_0;
    }
}

void FC2_layer::thread_fc2_output_d0() {
    fc2_output_d0 = grp_fu_166_p2.read();
}

void FC2_layer::thread_fc2_output_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        fc2_output_we0 = ap_const_logic_1;
    } else {
        fc2_output_we0 = ap_const_logic_0;
    }
}

void FC2_layer::thread_fc2_wei_address0() {
    fc2_wei_address0 =  (sc_lv<9>) (tmp_102_cast_fu_261_p1.read());
}

void FC2_layer::thread_fc2_wei_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        fc2_wei_ce0 = ap_const_logic_1;
    } else {
        fc2_wei_ce0 = ap_const_logic_0;
    }
}

void FC2_layer::thread_grp_fu_166_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_166_p1 = fc2_bias_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_166_p1 = tmp_35_reg_358.read();
    } else {
        grp_fu_166_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void FC2_layer::thread_i_12_fu_194_p2() {
    i_12_fu_194_p2 = (!i_reg_109.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_109.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void FC2_layer::thread_i_1_fu_276_p2() {
    i_1_fu_276_p2 = (!index_reg_155.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(index_reg_155.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void FC2_layer::thread_index_1_fu_287_p3() {
    index_1_fu_287_p3 = (!tmp_33_fu_177_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_33_fu_177_p2.read()[0].to_bool())? index_cast1_reg_368.read(): predict_write_assign_reg_131.read());
}

void FC2_layer::thread_index_cast1_fu_266_p1() {
    index_cast1_fu_266_p1 = esl_zext<32,4>(index_reg_155.read());
}

void FC2_layer::thread_k_1_fu_215_p2() {
    k_1_fu_215_p2 = (!k_reg_120.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(k_reg_120.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void FC2_layer::thread_maxn_1_fu_294_p3() {
    maxn_1_fu_294_p3 = (!tmp_33_fu_177_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_33_fu_177_p2.read()[0].to_bool())? fc2_output_q0.read(): maxn_reg_143.read());
}

void FC2_layer::thread_p_shl1_cast_fu_246_p1() {
    p_shl1_cast_fu_246_p1 = esl_zext<10,7>(tmp_83_fu_238_p3.read());
}

void FC2_layer::thread_p_shl_cast_fu_234_p1() {
    p_shl_cast_fu_234_p1 = esl_zext<10,9>(tmp_82_fu_226_p3.read());
}

void FC2_layer::thread_tmp_102_cast_fu_261_p1() {
    tmp_102_cast_fu_261_p1 = esl_zext<64,10>(tmp_85_fu_256_p2.read());
}

void FC2_layer::thread_tmp_32_fu_282_p1() {
    tmp_32_fu_282_p1 = esl_zext<64,4>(index_reg_155.read());
}

void FC2_layer::thread_tmp_34_fu_221_p1() {
    tmp_34_fu_221_p1 = esl_zext<64,6>(k_reg_120.read());
}

void FC2_layer::thread_tmp_82_fu_226_p3() {
    tmp_82_fu_226_p3 = esl_concat<6,3>(k_reg_120.read(), ap_const_lv3_0);
}

void FC2_layer::thread_tmp_83_fu_238_p3() {
    tmp_83_fu_238_p3 = esl_concat<6,1>(k_reg_120.read(), ap_const_lv1_0);
}

void FC2_layer::thread_tmp_84_fu_250_p2() {
    tmp_84_fu_250_p2 = (!p_shl1_cast_fu_246_p1.read().is_01() || !p_shl_cast_fu_234_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(p_shl1_cast_fu_246_p1.read()) + sc_biguint<10>(p_shl_cast_fu_234_p1.read()));
}

void FC2_layer::thread_tmp_85_fu_256_p2() {
    tmp_85_fu_256_p2 = (!tmp_84_fu_250_p2.read().is_01() || !tmp_cast_reg_315.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_84_fu_250_p2.read()) + sc_biguint<10>(tmp_cast_reg_315.read()));
}

void FC2_layer::thread_tmp_cast_fu_205_p1() {
    tmp_cast_fu_205_p1 = esl_zext<10,4>(i_reg_109.read());
}

void FC2_layer::thread_tmp_fu_200_p1() {
    tmp_fu_200_p1 = esl_zext<64,4>(i_reg_109.read());
}

void FC2_layer::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond3_fu_188_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_209_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_270_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<15>) ("XXXXXXXXXXXXXXX");
            break;
    }
}

}

