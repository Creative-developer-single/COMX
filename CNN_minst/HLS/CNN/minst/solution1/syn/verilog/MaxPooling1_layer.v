// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MaxPooling1_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv1_output_address0,
        conv1_output_ce0,
        conv1_output_q0,
        pool1_output_address0,
        pool1_output_ce0,
        pool1_output_we0,
        pool1_output_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv1_output_address0;
output   conv1_output_ce0;
input  [31:0] conv1_output_q0;
output  [8:0] pool1_output_address0;
output   pool1_output_ce0;
output   pool1_output_we0;
output  [31:0] pool1_output_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv1_output_ce0;
reg pool1_output_ce0;
reg pool1_output_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] channels_2_fu_184_p2;
reg   [1:0] channels_2_reg_458;
wire    ap_CS_fsm_state2;
wire  signed [8:0] tmp_23_cast_fu_220_p1;
reg  signed [8:0] tmp_23_cast_reg_463;
wire   [0:0] exitcond4_fu_178_p2;
wire  signed [7:0] tmp_26_cast_fu_254_p1;
reg  signed [7:0] tmp_26_cast_reg_468;
wire   [3:0] row_1_1_fu_264_p2;
reg   [3:0] row_1_1_reg_476;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_s_fu_270_p3;
reg   [4:0] tmp_s_reg_481;
wire   [0:0] exitcond3_fu_258_p2;
wire   [9:0] tmp_24_fu_307_p2;
reg   [9:0] tmp_24_reg_486;
wire   [3:0] column_1_1_fu_319_p2;
reg   [3:0] column_1_1_reg_494;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_11_fu_325_p3;
reg   [4:0] tmp_11_reg_499;
wire   [0:0] exitcond2_fu_313_p2;
wire   [1:0] i_2_fu_343_p2;
reg   [1:0] i_2_reg_507;
wire    ap_CS_fsm_state5;
wire   [11:0] tmp_27_fu_383_p2;
reg   [11:0] tmp_27_reg_512;
wire   [0:0] exitcond1_fu_337_p2;
wire   [1:0] j_2_fu_422_p2;
reg   [1:0] j_2_reg_520;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_416_p2;
wire   [31:0] maxn_2_fu_447_p3;
wire    ap_CS_fsm_state7;
reg   [1:0] channels_reg_90;
reg   [3:0] row_1_reg_101;
reg   [3:0] column_1_reg_112;
reg   [1:0] i_reg_124;
reg   [31:0] maxn_reg_135;
reg   [1:0] j_reg_147;
reg   [31:0] maxn_1_reg_158;
wire   [63:0] tmp_31_cast_fu_407_p1;
wire   [63:0] tmp_36_cast_fu_442_p1;
reg   [31:0] grp_fu_170_p0;
reg   [31:0] grp_fu_170_p1;
wire   [6:0] tmp_fu_190_p3;
wire   [4:0] tmp_14_fu_202_p3;
wire   [7:0] p_shl2_cast_fu_198_p1;
wire   [7:0] p_shl3_cast_fu_210_p1;
wire   [7:0] tmp_16_fu_214_p2;
wire   [5:0] tmp_19_fu_224_p3;
wire   [3:0] tmp_21_fu_236_p3;
wire   [6:0] p_shl_cast_fu_232_p1;
wire   [6:0] p_shl1_cast_fu_244_p1;
wire   [6:0] tmp_22_fu_248_p2;
wire   [7:0] tmp_10_cast_fu_278_p1;
wire   [7:0] tmp_23_fu_282_p2;
wire   [5:0] tmp_9_fu_287_p1;
wire   [9:0] p_shl4_cast_fu_291_p3;
wire   [9:0] p_shl5_cast_fu_299_p3;
wire   [4:0] i_cast2_fu_333_p1;
wire   [4:0] tmp_15_fu_349_p2;
wire   [8:0] tmp_16_cast_fu_354_p1;
wire   [8:0] tmp_26_fu_358_p2;
wire   [6:0] tmp_10_fu_363_p1;
wire   [11:0] p_shl6_cast_fu_367_p3;
wire   [11:0] p_shl7_cast_fu_375_p3;
wire   [0:0] grp_fu_170_p2;
wire   [9:0] tmp_14_cast_fu_398_p1;
wire   [9:0] tmp_25_fu_402_p2;
wire   [4:0] j_cast1_fu_412_p1;
wire   [4:0] tmp_18_fu_428_p2;
wire   [11:0] tmp_19_cast_fu_433_p1;
wire   [11:0] tmp_28_fu_437_p2;
reg   [4:0] grp_fu_170_opcode;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

run_fcmp_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
run_fcmp_32ns_32ndEe_U45(
    .din0(grp_fu_170_p0),
    .din1(grp_fu_170_p1),
    .opcode(grp_fu_170_opcode),
    .dout(grp_fu_170_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        channels_reg_90 <= channels_2_reg_458;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        channels_reg_90 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        column_1_reg_112 <= 4'd0;
    end else if (((exitcond1_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        column_1_reg_112 <= column_1_1_reg_494;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_416_p2 == 1'd1))) begin
        i_reg_124 <= i_2_reg_507;
    end else if (((exitcond2_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_124 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_147 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_147 <= j_2_reg_520;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        maxn_1_reg_158 <= maxn_reg_135;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        maxn_1_reg_158 <= maxn_2_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_416_p2 == 1'd1))) begin
        maxn_reg_135 <= maxn_1_reg_158;
    end else if (((exitcond2_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        maxn_reg_135 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        row_1_reg_101 <= row_1_1_reg_476;
    end else if (((exitcond4_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_1_reg_101 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        channels_2_reg_458 <= channels_2_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        column_1_1_reg_494 <= column_1_1_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_507 <= i_2_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_520 <= j_2_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_1_1_reg_476 <= row_1_1_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_11_reg_499[4 : 1] <= tmp_11_fu_325_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_23_cast_reg_463[8 : 3] <= tmp_23_cast_fu_220_p1[8 : 3];
        tmp_26_cast_reg_468[7 : 2] <= tmp_26_cast_fu_254_p1[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_24_reg_486[9 : 2] <= tmp_24_fu_307_p2[9 : 2];
        tmp_s_reg_481[4 : 1] <= tmp_s_fu_270_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_27_reg_512[11 : 3] <= tmp_27_fu_383_p2[11 : 3];
    end
end

always @ (*) begin
    if ((((exitcond4_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv1_output_ce0 = 1'b1;
    end else begin
        conv1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_170_opcode = 5'd4;
    end else if (((exitcond1_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_170_opcode = 5'd2;
    end else begin
        grp_fu_170_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_170_p0 = maxn_1_reg_158;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_170_p0 = maxn_reg_135;
    end else begin
        grp_fu_170_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_170_p1 = conv1_output_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_170_p1 = 32'd0;
    end else begin
        grp_fu_170_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        pool1_output_ce0 = 1'b1;
    end else begin
        pool1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        pool1_output_we0 = 1'b1;
    end else begin
        pool1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_337_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_416_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign channels_2_fu_184_p2 = (channels_reg_90 + 2'd1);

assign column_1_1_fu_319_p2 = (column_1_reg_112 + 4'd1);

assign conv1_output_address0 = tmp_36_cast_fu_442_p1;

assign exitcond1_fu_337_p2 = ((i_reg_124 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_313_p2 = ((column_1_reg_112 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond3_fu_258_p2 = ((row_1_reg_101 == 4'd12) ? 1'b1 : 1'b0);

assign exitcond4_fu_178_p2 = ((channels_reg_90 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_416_p2 = ((j_reg_147 == 2'd2) ? 1'b1 : 1'b0);

assign i_2_fu_343_p2 = (i_reg_124 + 2'd1);

assign i_cast2_fu_333_p1 = i_reg_124;

assign j_2_fu_422_p2 = (j_reg_147 + 2'd1);

assign j_cast1_fu_412_p1 = j_reg_147;

assign maxn_2_fu_447_p3 = ((grp_fu_170_p2[0:0] === 1'b1) ? conv1_output_q0 : maxn_1_reg_158);

assign p_shl1_cast_fu_244_p1 = tmp_21_fu_236_p3;

assign p_shl2_cast_fu_198_p1 = tmp_fu_190_p3;

assign p_shl3_cast_fu_210_p1 = tmp_14_fu_202_p3;

assign p_shl4_cast_fu_291_p3 = {{tmp_9_fu_287_p1}, {4'd0}};

assign p_shl5_cast_fu_299_p3 = {{tmp_23_fu_282_p2}, {2'd0}};

assign p_shl6_cast_fu_367_p3 = {{tmp_10_fu_363_p1}, {5'd0}};

assign p_shl7_cast_fu_375_p3 = {{tmp_26_fu_358_p2}, {3'd0}};

assign p_shl_cast_fu_232_p1 = tmp_19_fu_224_p3;

assign pool1_output_address0 = tmp_31_cast_fu_407_p1;

assign pool1_output_d0 = ((grp_fu_170_p2[0:0] === 1'b1) ? maxn_reg_135 : 32'd0);

assign row_1_1_fu_264_p2 = (row_1_reg_101 + 4'd1);

assign tmp_10_cast_fu_278_p1 = row_1_reg_101;

assign tmp_10_fu_363_p1 = tmp_26_fu_358_p2[6:0];

assign tmp_11_fu_325_p3 = {{column_1_reg_112}, {1'd0}};

assign tmp_14_cast_fu_398_p1 = column_1_reg_112;

assign tmp_14_fu_202_p3 = {{channels_reg_90}, {3'd0}};

assign tmp_15_fu_349_p2 = (tmp_s_reg_481 + i_cast2_fu_333_p1);

assign tmp_16_cast_fu_354_p1 = tmp_15_fu_349_p2;

assign tmp_16_fu_214_p2 = (p_shl2_cast_fu_198_p1 - p_shl3_cast_fu_210_p1);

assign tmp_18_fu_428_p2 = (j_cast1_fu_412_p1 + tmp_11_reg_499);

assign tmp_19_cast_fu_433_p1 = tmp_18_fu_428_p2;

assign tmp_19_fu_224_p3 = {{channels_reg_90}, {4'd0}};

assign tmp_21_fu_236_p3 = {{channels_reg_90}, {2'd0}};

assign tmp_22_fu_248_p2 = (p_shl_cast_fu_232_p1 - p_shl1_cast_fu_244_p1);

assign tmp_23_cast_fu_220_p1 = $signed(tmp_16_fu_214_p2);

assign tmp_23_fu_282_p2 = ($signed(tmp_26_cast_reg_468) + $signed(tmp_10_cast_fu_278_p1));

assign tmp_24_fu_307_p2 = (p_shl4_cast_fu_291_p3 - p_shl5_cast_fu_299_p3);

assign tmp_25_fu_402_p2 = (tmp_24_reg_486 + tmp_14_cast_fu_398_p1);

assign tmp_26_cast_fu_254_p1 = $signed(tmp_22_fu_248_p2);

assign tmp_26_fu_358_p2 = ($signed(tmp_16_cast_fu_354_p1) + $signed(tmp_23_cast_reg_463));

assign tmp_27_fu_383_p2 = (p_shl6_cast_fu_367_p3 - p_shl7_cast_fu_375_p3);

assign tmp_28_fu_437_p2 = (tmp_27_reg_512 + tmp_19_cast_fu_433_p1);

assign tmp_31_cast_fu_407_p1 = tmp_25_fu_402_p2;

assign tmp_36_cast_fu_442_p1 = tmp_28_fu_437_p2;

assign tmp_9_fu_287_p1 = tmp_23_fu_282_p2[5:0];

assign tmp_fu_190_p3 = {{channels_reg_90}, {5'd0}};

assign tmp_s_fu_270_p3 = {{row_1_reg_101}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_23_cast_reg_463[2:0] <= 3'b000;
    tmp_26_cast_reg_468[1:0] <= 2'b00;
    tmp_s_reg_481[0] <= 1'b0;
    tmp_24_reg_486[1:0] <= 2'b00;
    tmp_11_reg_499[0] <= 1'b0;
    tmp_27_reg_512[2:0] <= 3'b000;
end

endmodule //MaxPooling1_layer
