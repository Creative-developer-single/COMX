-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DWT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_ap_vld : OUT STD_LOGIC;
    data : IN STD_LOGIC_VECTOR (31 downto 0);
    read_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    read_ready : OUT STD_LOGIC_VECTOR (31 downto 0);
    read_ready_ap_vld : OUT STD_LOGIC;
    read_over : OUT STD_LOGIC_VECTOR (31 downto 0);
    read_over_ap_vld : OUT STD_LOGIC;
    write_valid : OUT STD_LOGIC_VECTOR (31 downto 0);
    write_valid_ap_vld : OUT STD_LOGIC );
end;


architecture behav of DWT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DWT,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.588000,HLS_SYN_LAT=65211,HLS_SYN_TPT=none,HLS_SYN_MEM=50,HLS_SYN_DSP=10,HLS_SYN_FF=1803,HLS_SYN_LUT=2325,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cal_flag : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal cnt : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_in_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_in_ce0 : STD_LOGIC;
    signal data_in_we0 : STD_LOGIC;
    signal data_in_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_g_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal filter_g_ce0 : STD_LOGIC;
    signal filter_g_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_h_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal filter_h_ce0 : STD_LOGIC;
    signal filter_h_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal cal_flag_load_load_fu_587_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal cal_flag_load_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_reg_1177 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvarinc_fu_642_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc1_fu_659_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvarinc1_reg_1189 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvarinc2_fu_665_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal indvarinc3_fu_696_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_1_fu_719_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_1216 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_3_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal level_1_fu_736_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal level_1_reg_1234 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_4_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_772_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_reg_1244 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_50_cast_fu_786_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_50_cast_reg_1249 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_11_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_1262 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_833_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_1_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_42_fu_839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_output_addr_1_reg_1293 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_store_addr_1_reg_1298 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_7_fu_912_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_931_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_1319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_23_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_input_load_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal filter_g_load_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_h_load_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_1358 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal data_store_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_store_load_1_reg_1363 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_1368 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_output_load_1_reg_1373 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_1378 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_1383 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_977_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_2_reg_1391 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_22_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1022_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_fu_1011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_1037_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_4_reg_1412 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_40_fu_1032_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_1065_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_55_reg_1422 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_5_fu_1108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp5_fu_1088_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_1120_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal data_input_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_input_ce0 : STD_LOGIC;
    signal data_input_we0 : STD_LOGIC;
    signal data_input_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_store_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal data_store_ce0 : STD_LOGIC;
    signal data_store_we0 : STD_LOGIC;
    signal data_store_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_output_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal data_output_ce0 : STD_LOGIC;
    signal data_output_we0 : STD_LOGIC;
    signal data_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_cnt_loc_i_phi_fu_381_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_read_ready_i_phi_fu_390_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar_reg_398 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_409 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar2_reg_421 : STD_LOGIC_VECTOR (10 downto 0);
    signal invdar3_reg_432 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_443 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal level_reg_454 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cal_length_reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i2_reg_499 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i3_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_reg_520 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i5_reg_531 : STD_LOGIC_VECTOR (31 downto 0);
    signal i6_reg_540 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_load_1_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_load_2_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_cast_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_1017_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_cast_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_cast_fu_1073_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_cast_fu_1103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_cast_fu_1153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_1158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_1_i_fu_602_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_fu_615_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal read_ready_write_ass_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_671_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_748_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_760_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_768_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_756_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_778_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_fu_850_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_44_fu_854_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_neg_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_878_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_30_fu_888_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_898_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_fu_864_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_892_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_953_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_957_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i2_cast_fu_968_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_983_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_1001_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i4_cast_fu_1028_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_1043_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_cast_fu_1047_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_54_fu_1055_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_56_fu_1069_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_57_fu_1078_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_58_fu_1094_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_59_fu_1098_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_47_fu_1135_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_56_cast_fu_1139_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_45_fu_1131_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_49_fu_1147_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_condition_178 : BOOLEAN;
    signal ap_condition_453 : BOOLEAN;

    component DWT_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DWT_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DWT_data_in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DWT_filter_g IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DWT_filter_h IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DWT_data_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DWT_data_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    data_in_U : component DWT_data_in
    generic map (
        DataWidth => 32,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_in_address0,
        ce0 => data_in_ce0,
        we0 => data_in_we0,
        d0 => data,
        q0 => data_in_q0);

    filter_g_U : component DWT_filter_g
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filter_g_address0,
        ce0 => filter_g_ce0,
        q0 => filter_g_q0);

    filter_h_U : component DWT_filter_h
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => filter_h_address0,
        ce0 => filter_h_ce0,
        q0 => filter_h_q0);

    data_input_U : component DWT_data_input
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_input_address0,
        ce0 => data_input_ce0,
        we0 => data_input_we0,
        d0 => data_input_d0,
        q0 => data_input_q0);

    data_store_U : component DWT_data_input
    generic map (
        DataWidth => 32,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_store_address0,
        ce0 => data_store_ce0,
        we0 => data_store_we0,
        d0 => data_store_d0,
        q0 => data_store_q0);

    data_output_U : component DWT_data_output
    generic map (
        DataWidth => 32,
        AddressRange => 10240,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_output_address0,
        ce0 => data_output_ce0,
        we0 => data_output_we0,
        d0 => data_output_d0,
        q0 => data_output_q0);

    DWT_fadd_32ns_32nbkb_U1 : component DWT_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_store_load_1_reg_1363,
        din1 => tmp_34_reg_1358,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p2);

    DWT_fadd_32ns_32nbkb_U2 : component DWT_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_output_load_1_reg_1373,
        din1 => tmp_37_reg_1368,
        ce => ap_const_logic_1,
        dout => grp_fu_575_p2);

    DWT_fmul_32ns_32ncud_U3 : component DWT_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_input_load_reg_1342,
        din1 => filter_g_load_reg_1348,
        ce => ap_const_logic_1,
        dout => grp_fu_579_p2);

    DWT_fmul_32ns_32ncud_U4 : component DWT_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_input_load_reg_1342,
        din1 => filter_h_load_reg_1353,
        ce => ap_const_logic_1,
        dout => grp_fu_583_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    cal_length_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_713_p2 = ap_const_lv1_1))) then 
                cal_length_reg_465 <= ap_const_lv32_400;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond3_fu_1114_p2 = ap_const_lv1_1))) then 
                cal_length_reg_465 <= i_7_reg_1303;
            end if; 
        end if;
    end process;

    i1_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_707_p2 = ap_const_lv1_1))) then 
                i1_reg_443 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i1_reg_443 <= i_1_reg_1216;
            end if; 
        end if;
    end process;

    i2_reg_499_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i2_reg_499 <= i_2_reg_1391;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_12_fu_828_p2 = ap_const_lv1_1))) then 
                i2_reg_499 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i3_reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_22_fu_972_p2 = ap_const_lv1_1))) then 
                i3_reg_511 <= i_7_reg_1303;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_fu_1011_p2 = ap_const_lv1_1))) then 
                i3_reg_511 <= i_3_fu_1022_p2;
            end if; 
        end if;
    end process;

    i4_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_fu_1011_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i4_reg_520 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i4_reg_520 <= i_4_reg_1412;
            end if; 
        end if;
    end process;

    i5_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (tmp_40_fu_1032_p2 = ap_const_lv1_1))) then 
                i5_reg_531 <= i_7_reg_1303;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp5_fu_1088_p2 = ap_const_lv1_1))) then 
                i5_reg_531 <= i_5_fu_1108_p2;
            end if; 
        end if;
    end process;

    i6_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp5_fu_1088_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i6_reg_540 <= ap_const_lv11_0;
            elsif (((exitcond3_fu_1114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i6_reg_540 <= i_6_fu_1120_p2;
            end if; 
        end if;
    end process;

    i_load_1_reg_551_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                if ((ap_const_boolean_1 = ap_condition_453)) then 
                    i_load_1_reg_551 <= i;
                elsif ((ap_const_boolean_1 = ap_condition_178)) then 
                    i_load_1_reg_551 <= tmp_18_fu_816_p2;
                end if;
            end if; 
        end if;
    end process;

    invdar1_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_6_fu_653_p2 = ap_const_lv1_1))) then 
                invdar1_reg_409 <= ap_const_lv3_0;
            elsif (((tmp_s_fu_690_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_9_fu_684_p2 = ap_const_lv1_1))) then 
                invdar1_reg_409 <= indvarinc1_reg_1189;
            end if; 
        end if;
    end process;

    invdar2_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_684_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                invdar2_reg_421 <= indvarinc2_fu_665_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                invdar2_reg_421 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    invdar3_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_690_p2 = ap_const_lv1_1) and (tmp_9_fu_684_p2 = ap_const_lv1_1))) then 
                invdar3_reg_432 <= ap_const_lv11_0;
            elsif (((tmp_2_fu_707_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                invdar3_reg_432 <= indvarinc3_fu_696_p2;
            end if; 
        end if;
    end process;

    invdar_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_i_fu_620_p2 = ap_const_lv1_1) and (cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_398 <= ap_const_lv11_0;
            elsif (((tmp_6_fu_653_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_398 <= indvarinc_fu_642_p2;
            end if; 
        end if;
    end process;

    j_load_2_reg_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                if ((ap_const_boolean_1 = ap_condition_453)) then 
                    j_load_2_reg_560 <= j;
                elsif ((ap_const_boolean_1 = ap_condition_178)) then 
                    j_load_2_reg_560 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    k_reg_488_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                k_reg_488 <= k_1_reg_1319;
            elsif (((tmp_12_fu_828_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                k_reg_488 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    level_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_713_p2 = ap_const_lv1_1))) then 
                level_reg_454 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond3_fu_1114_p2 = ap_const_lv1_1))) then 
                level_reg_454 <= level_1_reg_1234;
            end if; 
        end if;
    end process;

    n_reg_477_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cal_flag_load_reg_1170 = ap_const_lv1_0) and (exitcond4_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                n_reg_477 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and ((tmp_29_fu_937_p2 = ap_const_lv1_1) or (tmp_23_fu_926_p2 = ap_const_lv1_1)))) then 
                n_reg_477 <= n_1_reg_1282;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and ((cal_flag_load_reg_1170 = ap_const_lv1_1) or (exitcond4_fu_730_p2 = ap_const_lv1_1)))) then
                cal_flag <= ap_const_lv1_1;
                tmp_11_reg_1262 <= tmp_11_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cal_flag_load_reg_1170 <= cal_flag;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_i_fu_591_p2 = ap_const_lv1_1))) then
                cnt <= tmp_1_i_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                data_input_load_reg_1342 <= data_input_q0;
                filter_g_load_reg_1348 <= filter_g_q0;
                filter_h_load_reg_1353 <= filter_h_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_fu_828_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                data_output_addr_1_reg_1293 <= tmp_54_cast_fu_859_p1(14 - 1 downto 0);
                data_store_addr_1_reg_1298 <= tmp_17_fu_845_p1(11 - 1 downto 0);
                    tmp_42_reg_1287(31 downto 1) <= tmp_42_fu_839_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                data_output_load_1_reg_1373 <= data_output_q0;
                data_store_load_1_reg_1363 <= data_store_q0;
                tmp_34_reg_1358 <= grp_fu_579_p2;
                tmp_37_reg_1368 <= grp_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (((cal_flag_load_reg_1170 = ap_const_lv1_1) and (tmp_11_fu_800_p2 = ap_const_lv1_0) and (tmp_13_fu_810_p2 = ap_const_lv1_1)) or ((tmp_11_fu_800_p2 = ap_const_lv1_0) and (tmp_13_fu_810_p2 = ap_const_lv1_1) and (exitcond4_fu_730_p2 = ap_const_lv1_1))))) then
                i <= tmp_18_fu_816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_1_reg_1216 <= i_1_fu_719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                i_2_reg_1391 <= i_2_fu_977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                i_4_reg_1412 <= i_4_fu_1037_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_12_fu_828_p2 = ap_const_lv1_1))) then
                i_7_reg_1303 <= i_7_fu_912_p3;
                tmp_14_reg_1310 <= tmp_14_fu_920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                indvarinc1_reg_1189 <= indvarinc1_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                j <= tmp_21_fu_1158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                k_1_reg_1319 <= k_1_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cal_flag_load_reg_1170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                level_1_reg_1234 <= level_1_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                n_1_reg_1282 <= n_1_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cal_flag_load_reg_1170 = ap_const_lv1_0) and (exitcond4_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_16_reg_1244(6 downto 1) <= tmp_16_fu_772_p2(6 downto 1);
                tmp_4_reg_1239 <= tmp_4_fu_742_p2;
                    tmp_50_cast_reg_1249(13 downto 11) <= tmp_50_cast_fu_786_p1(13 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_35_reg_1378 <= grp_fu_571_p2;
                tmp_38_reg_1383 <= grp_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_3_i_reg_1177 <= tmp_3_i_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_713_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_3_reg_1221(10 downto 0) <= tmp_3_fu_725_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_40_fu_1032_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                tmp_55_reg_1422 <= tmp_55_fu_1065_p1;
            end if;
        end if;
    end process;
    tmp_3_reg_1221(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    tmp_16_reg_1244(0) <= '0';
    tmp_50_cast_reg_1249(10 downto 0) <= "00000000000";
    tmp_50_cast_reg_1249(14) <= '0';
    tmp_42_reg_1287(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, cal_flag_load_load_fu_587_p1, cal_flag_load_reg_1170, tmp_3_i_fu_620_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, exitcond5_fu_713_p2, ap_CS_fsm_state8, exitcond4_fu_730_p2, tmp_11_fu_800_p2, ap_CS_fsm_state9, tmp_12_fu_828_p2, ap_CS_fsm_state10, tmp_23_fu_926_p2, tmp_29_fu_937_p2, ap_CS_fsm_state20, tmp_22_fu_972_p2, ap_CS_fsm_state22, icmp_fu_1011_p2, ap_CS_fsm_state23, tmp_40_fu_1032_p2, ap_CS_fsm_state25, icmp5_fu_1088_p2, ap_CS_fsm_state26, tmp_6_fu_653_p2, tmp_9_fu_684_p2, tmp_s_fu_690_p2, tmp_2_fu_707_p2, exitcond3_fu_1114_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_3_i_fu_620_p2 = ap_const_lv1_1) and (cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_3_i_fu_620_p2 = ap_const_lv1_0) and (cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                elsif (((cal_flag_load_load_fu_587_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_6_fu_653_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_s_fu_690_p2 = ap_const_lv1_1) and (tmp_9_fu_684_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((tmp_s_fu_690_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_9_fu_684_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_2_fu_707_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_713_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (((cal_flag_load_reg_1170 = ap_const_lv1_1) and (tmp_11_fu_800_p2 = ap_const_lv1_0)) or ((tmp_11_fu_800_p2 = ap_const_lv1_0) and (exitcond4_fu_730_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (((cal_flag_load_reg_1170 = ap_const_lv1_1) and (tmp_11_fu_800_p2 = ap_const_lv1_1)) or ((tmp_11_fu_800_p2 = ap_const_lv1_1) and (exitcond4_fu_730_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_12_fu_828_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and ((tmp_29_fu_937_p2 = ap_const_lv1_1) or (tmp_23_fu_926_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (tmp_22_fu_972_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state22 => 
                if (((icmp_fu_1011_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (tmp_40_fu_1032_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state25 => 
                if (((icmp5_fu_1088_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond3_fu_1114_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_178_assign_proc : process(cal_flag_load_reg_1170, exitcond4_fu_730_p2, tmp_11_fu_800_p2, tmp_13_fu_810_p2)
    begin
                ap_condition_178 <= (((cal_flag_load_reg_1170 = ap_const_lv1_1) and (tmp_11_fu_800_p2 = ap_const_lv1_0) and (tmp_13_fu_810_p2 = ap_const_lv1_1)) or ((tmp_11_fu_800_p2 = ap_const_lv1_0) and (tmp_13_fu_810_p2 = ap_const_lv1_1) and (exitcond4_fu_730_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_453_assign_proc : process(cal_flag_load_reg_1170, exitcond4_fu_730_p2, tmp_11_fu_800_p2, tmp_13_fu_810_p2)
    begin
                ap_condition_453 <= (((cal_flag_load_reg_1170 = ap_const_lv1_1) and (tmp_13_fu_810_p2 = ap_const_lv1_0) and (tmp_11_fu_800_p2 = ap_const_lv1_0)) or ((tmp_13_fu_810_p2 = ap_const_lv1_0) and (tmp_11_fu_800_p2 = ap_const_lv1_0) and (exitcond4_fu_730_p2 = ap_const_lv1_1)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cnt_loc_i_phi_fu_381_p4_assign_proc : process(ap_CS_fsm_state1, cnt, cal_flag_load_load_fu_587_p1, tmp_1_i_fu_602_p2, tmp_i_fu_591_p2)
    begin
        if (((cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((tmp_i_fu_591_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_cnt_loc_i_phi_fu_381_p4 <= cnt;
            elsif ((tmp_i_fu_591_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_cnt_loc_i_phi_fu_381_p4 <= tmp_1_i_fu_602_p2;
            else 
                ap_phi_mux_cnt_loc_i_phi_fu_381_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_cnt_loc_i_phi_fu_381_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_read_ready_i_phi_fu_390_p4_assign_proc : process(ap_CS_fsm_state1, cal_flag_load_load_fu_587_p1, tmp_i_fu_591_p2)
    begin
        if (((cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((tmp_i_fu_591_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_read_ready_i_phi_fu_390_p4 <= ap_const_lv1_0;
            elsif ((tmp_i_fu_591_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_read_ready_i_phi_fu_390_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_read_ready_i_phi_fu_390_p4 <= "X";
            end if;
        else 
            ap_phi_mux_read_ready_i_phi_fu_390_p4 <= "X";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cal_flag_load_load_fu_587_p1 <= cal_flag;

    data_in_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, tmp_3_fu_725_p1, tmp_2_i_fu_615_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_in_address0 <= tmp_3_fu_725_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            data_in_address0 <= tmp_2_i_fu_615_p1(12 - 1 downto 0);
        else 
            data_in_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    data_in_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            data_in_ce0 <= ap_const_logic_1;
        else 
            data_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, cal_flag_load_load_fu_587_p1, tmp_i_fu_591_p2)
    begin
        if (((cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_i_fu_591_p2 = ap_const_lv1_1))) then 
            data_in_we0 <= ap_const_logic_1;
        else 
            data_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_input_address0_assign_proc : process(ap_CS_fsm_state5, tmp_3_reg_1221, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state21, tmp_1_fu_702_p1, tmp_32_fu_948_p1, tmp_27_fu_996_p1, tmp_36_fu_1017_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            data_input_address0 <= tmp_36_fu_1017_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            data_input_address0 <= tmp_27_fu_996_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_input_address0 <= tmp_32_fu_948_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_input_address0 <= tmp_3_reg_1221(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            data_input_address0 <= tmp_1_fu_702_p1(11 - 1 downto 0);
        else 
            data_input_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    data_input_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_input_ce0 <= ap_const_logic_1;
        else 
            data_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_input_d0_assign_proc : process(data_in_q0, ap_CS_fsm_state5, data_store_q0, ap_CS_fsm_state22, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            data_input_d0 <= data_store_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_input_d0 <= data_in_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            data_input_d0 <= ap_const_lv32_0;
        else 
            data_input_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_input_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state22, icmp_fu_1011_p2, ap_CS_fsm_state7, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_fu_1011_p2 = ap_const_lv1_1)))) then 
            data_input_we0 <= ap_const_logic_1;
        else 
            data_input_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out <= data_output_q0;

    data_out_ap_vld_assign_proc : process(cal_flag_load_reg_1170, tmp_3_i_reg_1177, tmp_11_reg_1262, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((tmp_3_i_reg_1177 = ap_const_lv1_1) and (tmp_11_reg_1262 = ap_const_lv1_0)) or ((cal_flag_load_reg_1170 = ap_const_lv1_1) and (tmp_11_reg_1262 = ap_const_lv1_0))))) then 
            data_out_ap_vld <= ap_const_logic_1;
        else 
            data_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    data_output_address0_assign_proc : process(ap_CS_fsm_state4, data_output_addr_1_reg_1293, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state19, ap_CS_fsm_state24, tmp_7_fu_679_p1, tmp_59_cast_fu_1060_p1, tmp_60_cast_fu_1073_p1, tmp_61_cast_fu_1103_p1, tmp_57_cast_fu_1153_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            data_output_address0 <= tmp_57_cast_fu_1153_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            data_output_address0 <= tmp_61_cast_fu_1103_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            data_output_address0 <= tmp_60_cast_fu_1073_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            data_output_address0 <= tmp_59_cast_fu_1060_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            data_output_address0 <= data_output_addr_1_reg_1293;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_output_address0 <= tmp_7_fu_679_p1(14 - 1 downto 0);
        else 
            data_output_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    data_output_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state27, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_output_ce0 <= ap_const_logic_1;
        else 
            data_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_output_d0_assign_proc : process(ap_CS_fsm_state4, data_output_q0, tmp_38_reg_1383, ap_CS_fsm_state25, ap_CS_fsm_state19, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            data_output_d0 <= data_output_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_output_d0 <= tmp_38_reg_1383;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            data_output_d0 <= ap_const_lv32_0;
        else 
            data_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_output_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state25, icmp5_fu_1088_p2, ap_CS_fsm_state19, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp5_fu_1088_p2 = ap_const_lv1_1)))) then 
            data_output_we0 <= ap_const_logic_1;
        else 
            data_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_store_address0_assign_proc : process(ap_CS_fsm_state2, data_store_addr_1_reg_1298, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state19, tmp_5_fu_648_p1, tmp_26_fu_991_p1, tmp_48_fu_1126_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            data_store_address0 <= tmp_48_fu_1126_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            data_store_address0 <= tmp_26_fu_991_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            data_store_address0 <= data_store_addr_1_reg_1298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_store_address0 <= tmp_5_fu_648_p1(11 - 1 downto 0);
        else 
            data_store_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    data_store_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state26, ap_CS_fsm_state19, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_store_ce0 <= ap_const_logic_1;
        else 
            data_store_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_store_d0_assign_proc : process(ap_CS_fsm_state2, tmp_35_reg_1378, ap_CS_fsm_state26, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            data_store_d0 <= tmp_35_reg_1378;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            data_store_d0 <= ap_const_lv32_0;
        else 
            data_store_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_store_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state26, exitcond3_fu_1114_p2, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((exitcond3_fu_1114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
            data_store_we0 <= ap_const_logic_1;
        else 
            data_store_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_1114_p2 <= "1" when (i6_reg_540 = ap_const_lv11_400) else "0";
    exitcond4_fu_730_p2 <= "1" when (level_reg_454 = ap_const_lv3_5) else "0";
    exitcond5_fu_713_p2 <= "1" when (i1_reg_443 = ap_const_lv11_400) else "0";
    filter_g_address0 <= tmp_58_cast_fu_962_p1(6 - 1 downto 0);

    filter_g_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            filter_g_ce0 <= ap_const_logic_1;
        else 
            filter_g_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    filter_h_address0 <= tmp_58_cast_fu_962_p1(6 - 1 downto 0);

    filter_h_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            filter_h_ce0 <= ap_const_logic_1;
        else 
            filter_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i2_cast_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_499),32));
    i4_cast_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_520),32));
    i_1_fu_719_p2 <= std_logic_vector(unsigned(i1_reg_443) + unsigned(ap_const_lv11_1));
    i_2_fu_977_p2 <= std_logic_vector(unsigned(i2_reg_499) + unsigned(ap_const_lv31_1));
    i_3_fu_1022_p2 <= std_logic_vector(signed(i3_reg_511) + signed(ap_const_lv32_1));
    i_4_fu_1037_p2 <= std_logic_vector(unsigned(i4_reg_520) + unsigned(ap_const_lv31_1));
    i_5_fu_1108_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i5_reg_531));
    i_6_fu_1120_p2 <= std_logic_vector(unsigned(i6_reg_540) + unsigned(ap_const_lv11_1));
    i_7_fu_912_p3 <= 
        p_neg_t_fu_892_p2 when (tmp_20_fu_864_p3(0) = '1') else 
        tmp_33_fu_908_p1;
    icmp5_fu_1088_p2 <= "1" when (signed(tmp_57_fu_1078_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_fu_1011_p2 <= "1" when (signed(tmp_50_fu_1001_p4) < signed(ap_const_lv22_1)) else "0";
    indvarinc1_fu_659_p2 <= std_logic_vector(unsigned(invdar1_reg_409) + unsigned(ap_const_lv3_1));
    indvarinc2_fu_665_p2 <= std_logic_vector(unsigned(invdar2_reg_421) + unsigned(ap_const_lv11_1));
    indvarinc3_fu_696_p2 <= std_logic_vector(unsigned(invdar3_reg_432) + unsigned(ap_const_lv11_1));
    indvarinc_fu_642_p2 <= std_logic_vector(unsigned(invdar_reg_398) + unsigned(ap_const_lv11_1));
    k_1_fu_931_p2 <= std_logic_vector(unsigned(k_reg_488) + unsigned(ap_const_lv32_1));
    level_1_fu_736_p2 <= std_logic_vector(unsigned(level_reg_454) + unsigned(ap_const_lv3_1));
    n_1_fu_833_p2 <= std_logic_vector(signed(n_reg_477) + signed(ap_const_lv32_1));
    p_lshr_f_fu_898_p4 <= cal_length_reg_465(31 downto 1);
    p_lshr_fu_878_p4 <= p_neg_fu_872_p2(31 downto 1);
    p_neg_fu_872_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(cal_length_reg_465));
    p_neg_t_fu_892_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_30_fu_888_p1));
    p_shl1_cast_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_760_p3),7));
    p_shl_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_748_p3),7));
    read_over <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_i_fu_620_p2),32));

    read_over_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, cal_flag_load_load_fu_587_p1)
    begin
        if (((cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            read_over_ap_vld <= ap_const_logic_1;
        else 
            read_over_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    read_ready <= std_logic_vector(IEEE.numeric_std.resize(unsigned(read_ready_write_ass_fu_626_p2),32));

    read_ready_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, cal_flag_load_load_fu_587_p1)
    begin
        if (((cal_flag_load_load_fu_587_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            read_ready_ap_vld <= ap_const_logic_1;
        else 
            read_ready_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    read_ready_write_ass_fu_626_p2 <= (tmp_3_i_fu_620_p2 or ap_phi_mux_read_ready_i_phi_fu_390_p4);
    tmp_10_fu_760_p3 <= (level_reg_454 & ap_const_lv1_0);
    tmp_11_fu_800_p2 <= "1" when (i = ap_const_lv32_5) else "0";
    tmp_12_fu_828_p2 <= "1" when (signed(n_reg_477) > signed(tmp_4_reg_1239)) else "0";
    tmp_13_fu_810_p2 <= "1" when (j = ap_const_lv32_400) else "0";
    tmp_14_fu_920_p2 <= std_logic_vector(unsigned(i_7_fu_912_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_16_fu_772_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_768_p1) + unsigned(p_shl_cast_fu_756_p1));
        tmp_17_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_reg_477),64));

    tmp_18_fu_816_p2 <= std_logic_vector(unsigned(i) + unsigned(ap_const_lv32_1));
    tmp_19_fu_778_p3 <= (level_reg_454 & ap_const_lv11_0);
    tmp_1_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar3_reg_432),64));
    tmp_1_i_fu_602_p0 <= cnt;
    tmp_1_i_fu_602_p2 <= std_logic_vector(signed(tmp_1_i_fu_602_p0) + signed(ap_const_lv32_1));
    tmp_20_fu_864_p3 <= cal_length_reg_465(31 downto 31);
    tmp_21_fu_1158_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_load_2_reg_560));
    tmp_22_fu_972_p2 <= "1" when (signed(i2_cast_fu_968_p1) > signed(tmp_14_reg_1310)) else "0";
    tmp_23_fu_926_p2 <= "1" when (signed(k_reg_488) > signed(tmp_42_reg_1287)) else "0";
    tmp_25_fu_983_p3 <= (i2_reg_499 & ap_const_lv1_0);
    tmp_26_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_983_p3),64));
    tmp_27_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_499),64));
    tmp_29_fu_937_p2 <= "1" when (signed(k_reg_488) > signed(ap_const_lv32_9)) else "0";
    tmp_2_fu_707_p2 <= "1" when (invdar3_reg_432 = ap_const_lv11_7FF) else "0";
    tmp_2_i_fu_615_p0 <= cnt;
        tmp_2_i_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_i_fu_615_p0),64));

    tmp_30_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_878_p4),32));
    tmp_31_fu_943_p2 <= std_logic_vector(unsigned(tmp_42_reg_1287) - unsigned(k_reg_488));
        tmp_32_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_943_p2),64));

    tmp_33_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_fu_898_p4),32));
        tmp_36_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i3_reg_511),64));

    tmp_3_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_443),64));
    tmp_3_i_fu_620_p2 <= "1" when (ap_phi_mux_cnt_loc_i_phi_fu_381_p4 = ap_const_lv32_400) else "0";
    tmp_40_fu_1032_p2 <= "1" when (signed(i4_cast_fu_1028_p1) > signed(tmp_14_reg_1310)) else "0";
    tmp_42_fu_839_p2 <= std_logic_vector(shift_left(unsigned(n_reg_477),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_43_cast_fu_1047_p3 <= (tmp_53_fu_1043_p1 & ap_const_lv1_0);
    tmp_43_fu_850_p1 <= n_reg_477(15 - 1 downto 0);
    tmp_44_fu_854_p2 <= std_logic_vector(unsigned(tmp_43_fu_850_p1) + unsigned(tmp_50_cast_reg_1249));
    tmp_45_fu_1131_p1 <= j_load_2_reg_560(15 - 1 downto 0);
    tmp_47_fu_1135_p1 <= i_load_1_reg_551(4 - 1 downto 0);
    tmp_48_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_reg_540),64));
    tmp_49_fu_1147_p2 <= std_logic_vector(unsigned(tmp_56_cast_fu_1139_p3) + unsigned(tmp_45_fu_1131_p1));
    tmp_4_fu_742_p2 <= std_logic_vector(unsigned(cal_length_reg_465) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_50_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_778_p3),15));
    tmp_50_fu_1001_p4 <= i3_reg_511(31 downto 10);
    tmp_51_fu_953_p1 <= k_reg_488(7 - 1 downto 0);
    tmp_52_fu_957_p2 <= std_logic_vector(unsigned(tmp_16_reg_1244) + unsigned(tmp_51_fu_953_p1));
    tmp_53_fu_1043_p1 <= i4_reg_520(14 - 1 downto 0);
        tmp_54_cast_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_44_fu_854_p2),64));

    tmp_54_fu_1055_p2 <= std_logic_vector(unsigned(tmp_50_cast_reg_1249) + unsigned(tmp_43_cast_fu_1047_p3));
    tmp_55_fu_1065_p1 <= i4_reg_520(15 - 1 downto 0);
    tmp_56_cast_fu_1139_p3 <= (tmp_47_fu_1135_p1 & ap_const_lv11_0);
    tmp_56_fu_1069_p2 <= std_logic_vector(unsigned(tmp_50_cast_reg_1249) + unsigned(tmp_55_reg_1422));
        tmp_57_cast_fu_1153_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_fu_1147_p2),64));

    tmp_57_fu_1078_p4 <= i5_reg_531(31 downto 10);
        tmp_58_cast_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_52_fu_957_p2),64));

    tmp_58_fu_1094_p1 <= i5_reg_531(15 - 1 downto 0);
    tmp_59_cast_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_1055_p2),64));
    tmp_59_fu_1098_p2 <= std_logic_vector(unsigned(tmp_50_cast_reg_1249) + unsigned(tmp_58_fu_1094_p1));
    tmp_5_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_398),64));
    tmp_60_cast_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_1069_p2),64));
        tmp_61_cast_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_59_fu_1098_p2),64));

    tmp_6_fu_653_p2 <= "1" when (invdar_reg_398 = ap_const_lv11_7FF) else "0";
    tmp_7_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_671_p3),64));
    tmp_8_fu_748_p3 <= (level_reg_454 & ap_const_lv3_0);
    tmp_9_fu_684_p2 <= "1" when (invdar2_reg_421 = ap_const_lv11_7FF) else "0";
    tmp_fu_671_p3 <= (invdar1_reg_409 & invdar2_reg_421);
    tmp_i_fu_591_p2 <= "1" when (read_valid = ap_const_lv32_1) else "0";
    tmp_s_fu_690_p2 <= "1" when (invdar1_reg_409 = ap_const_lv3_4) else "0";
    write_valid <= ap_const_lv32_1;

    write_valid_ap_vld_assign_proc : process(cal_flag_load_reg_1170, tmp_3_i_reg_1177, tmp_11_reg_1262, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (((tmp_3_i_reg_1177 = ap_const_lv1_1) and (tmp_11_reg_1262 = ap_const_lv1_0)) or ((cal_flag_load_reg_1170 = ap_const_lv1_1) and (tmp_11_reg_1262 = ap_const_lv1_0))))) then 
            write_valid_ap_vld <= ap_const_logic_1;
        else 
            write_valid_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
